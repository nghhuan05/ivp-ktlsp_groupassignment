{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nghhuan05/ivp-ktlsp_groupassignment/blob/main/lab01_trucquanhoabenhtieuduong_NHH\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Python libraries\n",
        "# Classic,data manipulation and linear algebra\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Plots\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import plotly.offline as py\n",
        "import plotly.graph_objs as go\n",
        "from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n",
        "import plotly.tools as tls\n",
        "import plotly.figure_factory as ff\n",
        "py.init_notebook_mode(connected=True)\n",
        "import squarify\n",
        "\n",
        "# Data processing, metrics and modeling\n",
        "!pip install lightgbm\n",
        "!pip install yellowbrick\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.model_selection import GridSearchCV, cross_val_score, train_test_split, GridSearchCV, RandomizedSearchCV\n",
        "from sklearn.metrics import precision_score, recall_score, confusion_matrix,  roc_curve, precision_recall_curve, accuracy_score, roc_auc_score\n",
        "import lightgbm as lgbm\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import roc_curve,auc\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.model_selection import cross_val_predict\n",
        "from yellowbrick.classifier import DiscriminationThreshold\n",
        "\n",
        "# Stats\n",
        "import scipy.stats as ss\n",
        "from numpy import interp\n",
        "from scipy.stats import randint as sp_randint\n",
        "from scipy.stats import uniform as sp_uniform\n",
        "\n",
        "# Time\n",
        "from contextlib import contextmanager\n",
        "@contextmanager\n",
        "def timer(title):\n",
        "    t0 = time.time()\n",
        "    yield\n",
        "    print(\"{} - done in {:.0f}s\".format(title, time.time() - t0))\n",
        "\n",
        "#ignore warning messages\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        },
        "id": "MkuHfyBrBvMY",
        "outputId": "2eeec716-449c-4831-e7e6-d7758048197b"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "        <script type=\"text/javascript\">\n",
              "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
              "        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
              "        if (typeof require !== 'undefined') {\n",
              "        require.undef(\"plotly\");\n",
              "        requirejs.config({\n",
              "            paths: {\n",
              "                'plotly': ['https://cdn.plot.ly/plotly-2.35.2.min']\n",
              "            }\n",
              "        });\n",
              "        require(['plotly'], function(Plotly) {\n",
              "            window._Plotly = Plotly;\n",
              "        });\n",
              "        }\n",
              "        </script>\n",
              "        "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: lightgbm in /usr/local/lib/python3.12/dist-packages (4.6.0)\n",
            "Requirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.12/dist-packages (from lightgbm) (2.0.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.12/dist-packages (from lightgbm) (1.16.2)\n",
            "Requirement already satisfied: yellowbrick in /usr/local/lib/python3.12/dist-packages (1.5)\n",
            "Requirement already satisfied: matplotlib!=3.0.0,>=2.0.2 in /usr/local/lib/python3.12/dist-packages (from yellowbrick) (3.10.0)\n",
            "Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.12/dist-packages (from yellowbrick) (1.16.2)\n",
            "Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.12/dist-packages (from yellowbrick) (1.6.1)\n",
            "Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.12/dist-packages (from yellowbrick) (2.0.2)\n",
            "Requirement already satisfied: cycler>=0.10.0 in /usr/local/lib/python3.12/dist-packages (from yellowbrick) (0.12.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (1.3.3)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (4.60.1)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (1.4.9)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (25.0)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.12/dist-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (11.3.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (3.2.5)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.12/dist-packages (from matplotlib!=3.0.0,>=2.0.2->yellowbrick) (2.9.0.post0)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn>=1.0.0->yellowbrick) (1.5.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn>=1.0.0->yellowbrick) (3.6.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.7->matplotlib!=3.0.0,>=2.0.2->yellowbrick) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "print(data.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_SV5aHo6CIuA",
        "outputId": "70df1155-39e0-488e-da71-098eb92714c0"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
            "0            6      148             72             35        0  33.6   \n",
            "1            1       85             66             29        0  26.6   \n",
            "2            8      183             64              0        0  23.3   \n",
            "3            1       89             66             23       94  28.1   \n",
            "4            0      137             40             35      168  43.1   \n",
            "\n",
            "   DiabetesPedigreeFunction  Age  Outcome  \n",
            "0                     0.627   50        1  \n",
            "1                     0.351   31        0  \n",
            "2                     0.672   32        1  \n",
            "3                     0.167   21        0  \n",
            "4                     2.288   33        1  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "display(data.info(),data.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 502
        },
        "id": "aSXUg3sWCNlA",
        "outputId": "3b01aaa6-34e1-49af-e6bd-f7a809211cd0"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 768 entries, 0 to 767\n",
            "Data columns (total 9 columns):\n",
            " #   Column                    Non-Null Count  Dtype  \n",
            "---  ------                    --------------  -----  \n",
            " 0   Pregnancies               768 non-null    int64  \n",
            " 1   Glucose                   768 non-null    int64  \n",
            " 2   BloodPressure             768 non-null    int64  \n",
            " 3   SkinThickness             768 non-null    int64  \n",
            " 4   Insulin                   768 non-null    int64  \n",
            " 5   BMI                       768 non-null    float64\n",
            " 6   DiabetesPedigreeFunction  768 non-null    float64\n",
            " 7   Age                       768 non-null    int64  \n",
            " 8   Outcome                   768 non-null    int64  \n",
            "dtypes: float64(2), int64(7)\n",
            "memory usage: 54.1 KB\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "None"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0            6      148             72             35        0  33.6   \n",
              "1            1       85             66             29        0  26.6   \n",
              "2            8      183             64              0        0  23.3   \n",
              "3            1       89             66             23       94  28.1   \n",
              "4            0      137             40             35      168  43.1   \n",
              "\n",
              "   DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                     0.627   50        1  \n",
              "1                     0.351   31        0  \n",
              "2                     0.672   32        1  \n",
              "3                     0.167   21        0  \n",
              "4                     2.288   33        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-677cd0f3-737c-4e8c-be49-94a9cc369103\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>66</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-677cd0f3-737c-4e8c-be49-94a9cc369103')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-677cd0f3-737c-4e8c-be49-94a9cc369103 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-677cd0f3-737c-4e8c-be49-94a9cc369103');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1f315d1e-5953-4a64-9c93-cb7b2bbc9305\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f315d1e-5953-4a64-9c93-cb7b2bbc9305')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1f315d1e-5953-4a64-9c93-cb7b2bbc9305 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Pregnancies\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          0,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Glucose\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41,\n        \"min\": 85,\n        \"max\": 183,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          85,\n          137,\n          183\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BloodPressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 40,\n        \"max\": 72,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          66,\n          40,\n          72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SkinThickness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 0,\n        \"max\": 35,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          29,\n          23,\n          35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Insulin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 76,\n        \"min\": 0,\n        \"max\": 168,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          94,\n          168\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BMI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.749387072536769,\n        \"min\": 23.3,\n        \"max\": 43.1,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          26.6,\n          43.1,\n          23.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DiabetesPedigreeFunction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8456568452983751,\n        \"min\": 0.167,\n        \"max\": 2.288,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.351,\n          2.288,\n          0.672\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 21,\n        \"max\": 50,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          31,\n          33,\n          32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outcome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "counts = data['Outcome'].value_counts()\n",
        "labels = counts.index\n",
        "colors = ['skyblue', 'gold']\n",
        "plt.figure(figsize=(7, 4))\n",
        "bars = plt.barh(labels, counts, color=colors, edgecolor='black')\n",
        "for bar in bars:\n",
        "    width = bar.get_width()\n",
        "    plt.text(width - 40, bar.get_y() + bar.get_height()/2,\n",
        "             f'{int(width)}', va='center', fontsize=12, color='black')\n",
        "\n",
        "plt.title('Count of Outcome variable', fontsize=14)\n",
        "plt.xlabel('')\n",
        "plt.ylabel('')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "UuGFOyeDCTFd",
        "outputId": "e887a057-2714-41c5-9bcc-4f8c522c80cd"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(6, 6))\n",
        "plt.pie(counts, labels=labels, colors=colors, autopct='%.1f%%',\n",
        "        startangle=90, textprops={'fontsize': 12})\n",
        "plt.title('Distribution of Outcome variable', fontsize=14)\n",
        "plt.legend(labels, loc='upper right')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "y_QZEpAjCV8G",
        "outputId": "2a20f54f-e55e-47a1-fa1f-f8c450ef7223"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install missingno\n",
        "import missingno as msno\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "70DPf6_6CdnI",
        "outputId": "5367b269-cb80-4766-e3de-f1e476e89f6c"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: missingno in /usr/local/lib/python3.12/dist-packages (0.5.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.12/dist-packages (from missingno) (2.0.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.12/dist-packages (from missingno) (3.10.0)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.12/dist-packages (from missingno) (1.16.2)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.12/dist-packages (from missingno) (0.13.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib->missingno) (1.3.3)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.12/dist-packages (from matplotlib->missingno) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib->missingno) (4.60.1)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib->missingno) (1.4.9)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib->missingno) (25.0)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.12/dist-packages (from matplotlib->missingno) (11.3.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib->missingno) (3.2.5)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.12/dist-packages (from matplotlib->missingno) (2.9.0.post0)\n",
            "Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.12/dist-packages (from seaborn->missingno) (2.2.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas>=1.2->seaborn->missingno) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas>=1.2->seaborn->missingno) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.7->matplotlib->missingno) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "msno.bar(data)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "7C8KA7SyCigi",
        "outputId": "006a6390-694e-4904-88bc-5087f892420a"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2500x1000 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.style.use('ggplot') # Using ggplot2 style visuals\n",
        "\n",
        "f, ax = plt.subplots(figsize=(11, 15))\n",
        "\n",
        "ax.set_facecolor('#fafafa')\n",
        "ax.set(xlim=(-.05, 200))\n",
        "plt.ylabel('Variables')\n",
        "plt.title(\"Overview Data Set\")\n",
        "ax = sns.boxplot(data = data,\n",
        "  orient = 'h',\n",
        "  palette = 'Set2')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "UOQrBmw6CleI",
        "outputId": "389590b0-86b9-4d98-d06f-884a2b01cedc"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1100x1500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def correlation_plot():\n",
        "    #correlation\n",
        "    correlation = data.corr()\n",
        "    #tick labels\n",
        "    matrix_cols = correlation.columns.tolist()\n",
        "    #convert to array\n",
        "    corr_array  = np.array(correlation)\n",
        "    trace = go.Heatmap(z = corr_array,\n",
        "                       x = matrix_cols,\n",
        "                       y = matrix_cols,\n",
        "                       colorscale='Viridis',\n",
        "                       colorbar   = dict() ,\n",
        "                      )\n",
        "    layout = go.Layout(dict(title = 'Correlation Matrix for variables',\n",
        "                            #autosize = False,\n",
        "                            #height  = 1400,\n",
        "                            #width   = 1600,\n",
        "                            margin  = dict(r = 0 ,l = 100,\n",
        "                                           t = 0,b = 100,\n",
        "                                         ),\n",
        "                            yaxis   = dict(tickfont = dict(size = 9)),\n",
        "                            xaxis   = dict(tickfont = dict(size = 9)),\n",
        "                           )\n",
        "                      )\n",
        "    fig = go.Figure(data = [trace],layout = layout)\n",
        "    py.iplot(fig)"
      ],
      "metadata": {
        "id": "1etM34JHCviE"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "correlation_plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "5CC_s3BLC0nW",
        "outputId": "36b90e36-8e78-4ddb-cf13-8c6db1cbe471"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.plotly.v1+json": {
              "data": [
                {
                  "colorscale": [
                    [
                      0,
                      "#440154"
                    ],
                    [
                      0.1111111111111111,
                      "#482878"
                    ],
                    [
                      0.2222222222222222,
                      "#3e4989"
                    ],
                    [
                      0.3333333333333333,
                      "#31688e"
                    ],
                    [
                      0.4444444444444444,
                      "#26828e"
                    ],
                    [
                      0.5555555555555556,
                      "#1f9e89"
                    ],
                    [
                      0.6666666666666666,
                      "#35b779"
                    ],
                    [
                      0.7777777777777778,
                      "#6ece58"
                    ],
                    [
                      0.8888888888888888,
                      "#b5de2b"
                    ],
                    [
                      1,
                      "#fde725"
                    ]
                  ],
                  "x": [
                    "Pregnancies",
                    "Glucose",
                    "BloodPressure",
                    "SkinThickness",
                    "Insulin",
                    "BMI",
                    "DiabetesPedigreeFunction",
                    "Age",
                    "Outcome"
                  ],
                  "y": [
                    "Pregnancies",
                    "Glucose",
                    "BloodPressure",
                    "SkinThickness",
                    "Insulin",
                    "BMI",
                    "DiabetesPedigreeFunction",
                    "Age",
                    "Outcome"
                  ],
                  "z": [
                    [
                      1,
                      0.12945867149927248,
                      0.14128197740713966,
                      -0.08167177444900726,
                      -0.07353461435162822,
                      0.017683090727830565,
                      -0.03352267296261304,
                      0.5443412284023392,
                      0.22189815303398636
                    ],
                    [
                      0.12945867149927248,
                      1,
                      0.1525895865686646,
                      0.05732789073817692,
                      0.3313571099202092,
                      0.2210710694589828,
                      0.13733729982837092,
                      0.26351431982433343,
                      0.46658139830687373
                    ],
                    [
                      0.14128197740713966,
                      0.1525895865686646,
                      1,
                      0.2073705384030709,
                      0.08893337837319314,
                      0.2818052888499109,
                      0.04126494793009856,
                      0.23952794642136344,
                      0.06506835955033277
                    ],
                    [
                      -0.08167177444900726,
                      0.05732789073817692,
                      0.2073705384030709,
                      1,
                      0.43678257012001326,
                      0.39257320415903835,
                      0.1839275729541631,
                      -0.11397026236774152,
                      0.07475223191831946
                    ],
                    [
                      -0.07353461435162822,
                      0.3313571099202092,
                      0.08893337837319314,
                      0.43678257012001326,
                      1,
                      0.19785905649310145,
                      0.1850709291680993,
                      -0.04216295473537695,
                      0.13054795488404794
                    ],
                    [
                      0.017683090727830565,
                      0.2210710694589828,
                      0.2818052888499109,
                      0.39257320415903835,
                      0.19785905649310145,
                      1,
                      0.14064695254510523,
                      0.03624187009229395,
                      0.2926946626444454
                    ],
                    [
                      -0.03352267296261304,
                      0.13733729982837092,
                      0.04126494793009856,
                      0.1839275729541631,
                      0.1850709291680993,
                      0.14064695254510523,
                      1,
                      0.03356131243480539,
                      0.17384406565296004
                    ],
                    [
                      0.5443412284023392,
                      0.26351431982433343,
                      0.23952794642136344,
                      -0.11397026236774152,
                      -0.04216295473537695,
                      0.03624187009229395,
                      0.03356131243480539,
                      1,
                      0.23835598302719757
                    ],
                    [
                      0.22189815303398636,
                      0.46658139830687373,
                      0.06506835955033277,
                      0.07475223191831946,
                      0.13054795488404794,
                      0.2926946626444454,
                      0.17384406565296004,
                      0.23835598302719757,
                      1
                    ]
                  ],
                  "type": "heatmap"
                }
              ],
              "layout": {
                "margin": {
                  "b": 100,
                  "l": 100,
                  "r": 0,
                  "t": 0
                },
                "template": {
                  "data": {
                    "barpolar": [
                      {
                        "marker": {
                          "line": {
                            "color": "#E5ECF6",
                            "width": 0.5
                          },
                          "pattern": {
                            "fillmode": "overlay",
                            "size": 10,
                            "solidity": 0.2
                          }
                        },
                        "type": "barpolar"
                      }
                    ],
                    "bar": [
                      {
                        "error_x": {
                          "color": "#2a3f5f"
                        },
                        "error_y": {
                          "color": "#2a3f5f"
                        },
                        "marker": {
                          "line": {
                            "color": "#E5ECF6",
                            "width": 0.5
                          },
                          "pattern": {
                            "fillmode": "overlay",
                            "size": 10,
                            "solidity": 0.2
                          }
                        },
                        "type": "bar"
                      }
                    ],
                    "carpet": [
                      {
                        "aaxis": {
                          "endlinecolor": "#2a3f5f",
                          "gridcolor": "white",
                          "linecolor": "white",
                          "minorgridcolor": "white",
                          "startlinecolor": "#2a3f5f"
                        },
                        "baxis": {
                          "endlinecolor": "#2a3f5f",
                          "gridcolor": "white",
                          "linecolor": "white",
                          "minorgridcolor": "white",
                          "startlinecolor": "#2a3f5f"
                        },
                        "type": "carpet"
                      }
                    ],
                    "choropleth": [
                      {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        },
                        "type": "choropleth"
                      }
                    ],
                    "contourcarpet": [
                      {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        },
                        "type": "contourcarpet"
                      }
                    ],
                    "contour": [
                      {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        },
                        "colorscale": [
                          [
                            0,
                            "#0d0887"
                          ],
                          [
                            0.1111111111111111,
                            "#46039f"
                          ],
                          [
                            0.2222222222222222,
                            "#7201a8"
                          ],
                          [
                            0.3333333333333333,
                            "#9c179e"
                          ],
                          [
                            0.4444444444444444,
                            "#bd3786"
                          ],
                          [
                            0.5555555555555556,
                            "#d8576b"
                          ],
                          [
                            0.6666666666666666,
                            "#ed7953"
                          ],
                          [
                            0.7777777777777778,
                            "#fb9f3a"
                          ],
                          [
                            0.8888888888888888,
                            "#fdca26"
                          ],
                          [
                            1,
                            "#f0f921"
                          ]
                        ],
                        "type": "contour"
                      }
                    ],
                    "heatmapgl": [
                      {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        },
                        "colorscale": [
                          [
                            0,
                            "#0d0887"
                          ],
                          [
                            0.1111111111111111,
                            "#46039f"
                          ],
                          [
                            0.2222222222222222,
                            "#7201a8"
                          ],
                          [
                            0.3333333333333333,
                            "#9c179e"
                          ],
                          [
                            0.4444444444444444,
                            "#bd3786"
                          ],
                          [
                            0.5555555555555556,
                            "#d8576b"
                          ],
                          [
                            0.6666666666666666,
                            "#ed7953"
                          ],
                          [
                            0.7777777777777778,
                            "#fb9f3a"
                          ],
                          [
                            0.8888888888888888,
                            "#fdca26"
                          ],
                          [
                            1,
                            "#f0f921"
                          ]
                        ],
                        "type": "heatmapgl"
                      }
                    ],
                    "heatmap": [
                      {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        },
                        "colorscale": [
                          [
                            0,
                            "#0d0887"
                          ],
                          [
                            0.1111111111111111,
                            "#46039f"
                          ],
                          [
                            0.2222222222222222,
                            "#7201a8"
                          ],
                          [
                            0.3333333333333333,
                            "#9c179e"
                          ],
                          [
                            0.4444444444444444,
                            "#bd3786"
                          ],
                          [
                            0.5555555555555556,
                            "#d8576b"
                          ],
                          [
                            0.6666666666666666,
                            "#ed7953"
                          ],
                          [
                            0.7777777777777778,
                            "#fb9f3a"
                          ],
                          [
                            0.8888888888888888,
                            "#fdca26"
                          ],
                          [
                            1,
                            "#f0f921"
                          ]
                        ],
                        "type": "heatmap"
                      }
                    ],
                    "histogram2dcontour": [
                      {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        },
                        "colorscale": [
                          [
                            0,
                            "#0d0887"
                          ],
                          [
                            0.1111111111111111,
                            "#46039f"
                          ],
                          [
                            0.2222222222222222,
                            "#7201a8"
                          ],
                          [
                            0.3333333333333333,
                            "#9c179e"
                          ],
                          [
                            0.4444444444444444,
                            "#bd3786"
                          ],
                          [
                            0.5555555555555556,
                            "#d8576b"
                          ],
                          [
                            0.6666666666666666,
                            "#ed7953"
                          ],
                          [
                            0.7777777777777778,
                            "#fb9f3a"
                          ],
                          [
                            0.8888888888888888,
                            "#fdca26"
                          ],
                          [
                            1,
                            "#f0f921"
                          ]
                        ],
                        "type": "histogram2dcontour"
                      }
                    ],
                    "histogram2d": [
                      {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        },
                        "colorscale": [
                          [
                            0,
                            "#0d0887"
                          ],
                          [
                            0.1111111111111111,
                            "#46039f"
                          ],
                          [
                            0.2222222222222222,
                            "#7201a8"
                          ],
                          [
                            0.3333333333333333,
                            "#9c179e"
                          ],
                          [
                            0.4444444444444444,
                            "#bd3786"
                          ],
                          [
                            0.5555555555555556,
                            "#d8576b"
                          ],
                          [
                            0.6666666666666666,
                            "#ed7953"
                          ],
                          [
                            0.7777777777777778,
                            "#fb9f3a"
                          ],
                          [
                            0.8888888888888888,
                            "#fdca26"
                          ],
                          [
                            1,
                            "#f0f921"
                          ]
                        ],
                        "type": "histogram2d"
                      }
                    ],
                    "histogram": [
                      {
                        "marker": {
                          "pattern": {
                            "fillmode": "overlay",
                            "size": 10,
                            "solidity": 0.2
                          }
                        },
                        "type": "histogram"
                      }
                    ],
                    "mesh3d": [
                      {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        },
                        "type": "mesh3d"
                      }
                    ],
                    "parcoords": [
                      {
                        "line": {
                          "colorbar": {
                            "outlinewidth": 0,
                            "ticks": ""
                          }
                        },
                        "type": "parcoords"
                      }
                    ],
                    "pie": [
                      {
                        "automargin": true,
                        "type": "pie"
                      }
                    ],
                    "scatter3d": [
                      {
                        "line": {
                          "colorbar": {
                            "outlinewidth": 0,
                            "ticks": ""
                          }
                        },
                        "marker": {
                          "colorbar": {
                            "outlinewidth": 0,
                            "ticks": ""
                          }
                        },
                        "type": "scatter3d"
                      }
                    ],
                    "scattercarpet": [
                      {
                        "marker": {
                          "colorbar": {
                            "outlinewidth": 0,
                            "ticks": ""
                          }
                        },
                        "type": "scattercarpet"
                      }
                    ],
                    "scattergeo": [
                      {
                        "marker": {
                          "colorbar": {
                            "outlinewidth": 0,
                            "ticks": ""
                          }
                        },
                        "type": "scattergeo"
                      }
                    ],
                    "scattergl": [
                      {
                        "marker": {
                          "colorbar": {
                            "outlinewidth": 0,
                            "ticks": ""
                          }
                        },
                        "type": "scattergl"
                      }
                    ],
                    "scattermapbox": [
                      {
                        "marker": {
                          "colorbar": {
                            "outlinewidth": 0,
                            "ticks": ""
                          }
                        },
                        "type": "scattermapbox"
                      }
                    ],
                    "scatterpolargl": [
                      {
                        "marker": {
                          "colorbar": {
                            "outlinewidth": 0,
                            "ticks": ""
                          }
                        },
                        "type": "scatterpolargl"
                      }
                    ],
                    "scatterpolar": [
                      {
                        "marker": {
                          "colorbar": {
                            "outlinewidth": 0,
                            "ticks": ""
                          }
                        },
                        "type": "scatterpolar"
                      }
                    ],
                    "scatter": [
                      {
                        "fillpattern": {
                          "fillmode": "overlay",
                          "size": 10,
                          "solidity": 0.2
                        },
                        "type": "scatter"
                      }
                    ],
                    "scatterternary": [
                      {
                        "marker": {
                          "colorbar": {
                            "outlinewidth": 0,
                            "ticks": ""
                          }
                        },
                        "type": "scatterternary"
                      }
                    ],
                    "surface": [
                      {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        },
                        "colorscale": [
                          [
                            0,
                            "#0d0887"
                          ],
                          [
                            0.1111111111111111,
                            "#46039f"
                          ],
                          [
                            0.2222222222222222,
                            "#7201a8"
                          ],
                          [
                            0.3333333333333333,
                            "#9c179e"
                          ],
                          [
                            0.4444444444444444,
                            "#bd3786"
                          ],
                          [
                            0.5555555555555556,
                            "#d8576b"
                          ],
                          [
                            0.6666666666666666,
                            "#ed7953"
                          ],
                          [
                            0.7777777777777778,
                            "#fb9f3a"
                          ],
                          [
                            0.8888888888888888,
                            "#fdca26"
                          ],
                          [
                            1,
                            "#f0f921"
                          ]
                        ],
                        "type": "surface"
                      }
                    ],
                    "table": [
                      {
                        "cells": {
                          "fill": {
                            "color": "#EBF0F8"
                          },
                          "line": {
                            "color": "white"
                          }
                        },
                        "header": {
                          "fill": {
                            "color": "#C8D4E3"
                          },
                          "line": {
                            "color": "white"
                          }
                        },
                        "type": "table"
                      }
                    ]
                  },
                  "layout": {
                    "annotationdefaults": {
                      "arrowcolor": "#2a3f5f",
                      "arrowhead": 0,
                      "arrowwidth": 1
                    },
                    "autotypenumbers": "strict",
                    "coloraxis": {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      }
                    },
                    "colorscale": {
                      "diverging": [
                        [
                          0,
                          "#8e0152"
                        ],
                        [
                          0.1,
                          "#c51b7d"
                        ],
                        [
                          0.2,
                          "#de77ae"
                        ],
                        [
                          0.3,
                          "#f1b6da"
                        ],
                        [
                          0.4,
                          "#fde0ef"
                        ],
                        [
                          0.5,
                          "#f7f7f7"
                        ],
                        [
                          0.6,
                          "#e6f5d0"
                        ],
                        [
                          0.7,
                          "#b8e186"
                        ],
                        [
                          0.8,
                          "#7fbc41"
                        ],
                        [
                          0.9,
                          "#4d9221"
                        ],
                        [
                          1,
                          "#276419"
                        ]
                      ],
                      "sequential": [
                        [
                          0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1,
                          "#f0f921"
                        ]
                      ],
                      "sequentialminus": [
                        [
                          0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1,
                          "#f0f921"
                        ]
                      ]
                    },
                    "colorway": [
                      "#636efa",
                      "#EF553B",
                      "#00cc96",
                      "#ab63fa",
                      "#FFA15A",
                      "#19d3f3",
                      "#FF6692",
                      "#B6E880",
                      "#FF97FF",
                      "#FECB52"
                    ],
                    "font": {
                      "color": "#2a3f5f"
                    },
                    "geo": {
                      "bgcolor": "white",
                      "lakecolor": "white",
                      "landcolor": "#E5ECF6",
                      "showlakes": true,
                      "showland": true,
                      "subunitcolor": "white"
                    },
                    "hoverlabel": {
                      "align": "left"
                    },
                    "hovermode": "closest",
                    "mapbox": {
                      "style": "light"
                    },
                    "paper_bgcolor": "white",
                    "plot_bgcolor": "#E5ECF6",
                    "polar": {
                      "angularaxis": {
                        "gridcolor": "white",
                        "linecolor": "white",
                        "ticks": ""
                      },
                      "bgcolor": "#E5ECF6",
                      "radialaxis": {
                        "gridcolor": "white",
                        "linecolor": "white",
                        "ticks": ""
                      }
                    },
                    "scene": {
                      "xaxis": {
                        "backgroundcolor": "#E5ECF6",
                        "gridcolor": "white",
                        "gridwidth": 2,
                        "linecolor": "white",
                        "showbackground": true,
                        "ticks": "",
                        "zerolinecolor": "white"
                      },
                      "yaxis": {
                        "backgroundcolor": "#E5ECF6",
                        "gridcolor": "white",
                        "gridwidth": 2,
                        "linecolor": "white",
                        "showbackground": true,
                        "ticks": "",
                        "zerolinecolor": "white"
                      },
                      "zaxis": {
                        "backgroundcolor": "#E5ECF6",
                        "gridcolor": "white",
                        "gridwidth": 2,
                        "linecolor": "white",
                        "showbackground": true,
                        "ticks": "",
                        "zerolinecolor": "white"
                      }
                    },
                    "shapedefaults": {
                      "line": {
                        "color": "#2a3f5f"
                      }
                    },
                    "ternary": {
                      "aaxis": {
                        "gridcolor": "white",
                        "linecolor": "white",
                        "ticks": ""
                      },
                      "baxis": {
                        "gridcolor": "white",
                        "linecolor": "white",
                        "ticks": ""
                      },
                      "bgcolor": "#E5ECF6",
                      "caxis": {
                        "gridcolor": "white",
                        "linecolor": "white",
                        "ticks": ""
                      }
                    },
                    "title": {
                      "x": 0.05
                    },
                    "xaxis": {
                      "automargin": true,
                      "gridcolor": "white",
                      "linecolor": "white",
                      "ticks": "",
                      "title": {
                        "standoff": 15
                      },
                      "zerolinecolor": "white",
                      "zerolinewidth": 2
                    },
                    "yaxis": {
                      "automargin": true,
                      "gridcolor": "white",
                      "linecolor": "white",
                      "ticks": "",
                      "title": {
                        "standoff": 15
                      },
                      "zerolinecolor": "white",
                      "zerolinewidth": 2
                    }
                  }
                },
                "title": {
                  "text": "Correlation Matrix for variables"
                },
                "xaxis": {
                  "tickfont": {
                    "size": 9
                  }
                },
                "yaxis": {
                  "tickfont": {
                    "size": 9
                  }
                }
              },
              "config": {
                "showLink": false,
                "linkText": "Export to plot.ly",
                "plotlyServerURL": "https://plot.ly"
              }
            },
            "text/html": [
              "<div>                            <div id=\"d54a8031-63ed-4655-a610-676687630b76\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d54a8031-63ed-4655-a610-676687630b76\")) {                    Plotly.newPlot(                        \"d54a8031-63ed-4655-a610-676687630b76\",                        [{\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"x\":[\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\",\"Outcome\"],\"y\":[\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\",\"Outcome\"],\"z\":[[1.0,0.12945867149927248,0.14128197740713966,-0.08167177444900726,-0.07353461435162822,0.017683090727830565,-0.03352267296261304,0.5443412284023392,0.22189815303398636],[0.12945867149927248,1.0,0.1525895865686646,0.05732789073817692,0.3313571099202092,0.2210710694589828,0.13733729982837092,0.26351431982433343,0.46658139830687373],[0.14128197740713966,0.1525895865686646,1.0,0.2073705384030709,0.08893337837319314,0.2818052888499109,0.04126494793009856,0.23952794642136344,0.06506835955033277],[-0.08167177444900726,0.05732789073817692,0.2073705384030709,1.0,0.43678257012001326,0.39257320415903835,0.1839275729541631,-0.11397026236774152,0.07475223191831946],[-0.07353461435162822,0.3313571099202092,0.08893337837319314,0.43678257012001326,1.0,0.19785905649310145,0.1850709291680993,-0.04216295473537695,0.13054795488404794],[0.017683090727830565,0.2210710694589828,0.2818052888499109,0.39257320415903835,0.19785905649310145,1.0,0.14064695254510523,0.03624187009229395,0.2926946626444454],[-0.03352267296261304,0.13733729982837092,0.04126494793009856,0.1839275729541631,0.1850709291680993,0.14064695254510523,1.0,0.03356131243480539,0.17384406565296004],[0.5443412284023392,0.26351431982433343,0.23952794642136344,-0.11397026236774152,-0.04216295473537695,0.03624187009229395,0.03356131243480539,1.0,0.23835598302719757],[0.22189815303398636,0.46658139830687373,0.06506835955033277,0.07475223191831946,0.13054795488404794,0.2926946626444454,0.17384406565296004,0.23835598302719757,1.0]],\"type\":\"heatmap\"}],                        {\"margin\":{\"b\":100,\"l\":100,\"r\":0,\"t\":0},\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Correlation Matrix for variables\"},\"xaxis\":{\"tickfont\":{\"size\":9}},\"yaxis\":{\"tickfont\":{\"size\":9}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('d54a8031-63ed-4655-a610-676687630b76');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                });            </script>        </div>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import các thư viện cần thiết\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# Tạo dữ liệu mẫu cho nhóm \"healthy\" và \"diabetic\"\n",
        "np.random.seed(42)\n",
        "healthy = np.random.normal(loc=90, scale=15, size=1000)  # Phân phối chuẩn cho người khỏe mạnh\n",
        "diabetic = np.random.normal(loc=150, scale=25, size=1000)  # Phân phối chuẩn cho người tiểu đường\n",
        "\n",
        "# Kết hợp dữ liệu và tạo DataFrame ở dạng long-form\n",
        "data_combined = np.concatenate([healthy, diabetic])\n",
        "labels = ['healthy'] * len(healthy) + ['diabetic'] * len(diabetic)\n",
        "df_plot = pd.DataFrame({'Glucose Level': data_combined, 'Outcome': labels})\n",
        "\n",
        "# Tạo biểu đồ phân phối\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.kdeplot(data=df_plot, x='Glucose Level', hue='Outcome', common_norm=False, palette=['blue', 'yellow'], shade=True)\n",
        "\n",
        "# Đặt tiêu đề và nhãn\n",
        "plt.title('Glucose')\n",
        "plt.xlabel('Glucose Level')\n",
        "plt.ylabel('Density')\n",
        "\n",
        "# Hiển thị biểu đồ\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 566
        },
        "id": "NeKzXgP7DFHu",
        "outputId": "2c0899c8-614e-483c-9f50-2d431d8e6d6e"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import các thư viện cần thiết\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# Tạo dữ liệu mẫu cho nhóm \"healthy\" và \"diabetic\"\n",
        "np.random.seed(42)\n",
        "healthy = np.random.normal(loc=100, scale=50, size=1000)  # Phân phối chuẩn cho người khỏe mạnh\n",
        "diabetic = np.random.normal(loc=150, scale=100, size=1000)  # Phân phối chuẩn cho người tiểu đường\n",
        "\n",
        "# Kết hợp dữ liệu và tạo DataFrame ở dạng long-form\n",
        "data_combined = np.concatenate([healthy, diabetic])\n",
        "labels = ['healthy'] * len(healthy) + ['diabetic'] * len(diabetic)\n",
        "df_plot = pd.DataFrame({'Insulin Level': data_combined, 'Outcome': labels})\n",
        "\n",
        "\n",
        "# Tạo biểu đồ phân phối\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.kdeplot(data=df_plot, x='Insulin Level', hue='Outcome', common_norm=False, palette=['cyan', 'yellow'], shade=True)\n",
        "\n",
        "# Đặt tiêu đề và nhãn\n",
        "plt.title('Insulin')\n",
        "plt.xlabel('Insulin Level')\n",
        "plt.ylabel('Density')\n",
        "\n",
        "# Hiển thị biểu đồ\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 566
        },
        "id": "4KEkYCG2Dz1s",
        "outputId": "53d0b3b8-27d2-4dba-d5c5-c8c20a261fed"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import thư viện pandas\n",
        "import pandas as pd\n",
        "\n",
        "# Tạo dữ liệu\n",
        "data = {'Outcome': [0, 1], 'Insulin': [102.5, 169.5]}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Hiển thị bảng\n",
        "display(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "cgXPcvwWEP0_",
        "outputId": "c2972b02-9593-41b4-e428-2ec7daf2370e"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Outcome  Insulin\n",
              "0        0    102.5\n",
              "1        1    169.5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4dd33f6e-3b11-4de4-af14-15948585f39f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Outcome</th>\n",
              "      <th>Insulin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>102.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>169.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4dd33f6e-3b11-4de4-af14-15948585f39f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4dd33f6e-3b11-4de4-af14-15948585f39f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4dd33f6e-3b11-4de4-af14-15948585f39f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0e3276bc-9bce-4219-a741-31b0a4764375\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0e3276bc-9bce-4219-a741-31b0a4764375')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0e3276bc-9bce-4219-a741-31b0a4764375 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_c10321f1-b576-4422-a8c8-a74c4163f876\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c10321f1-b576-4422-a8c8-a74c4163f876 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Outcome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Insulin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47.37615433949868,\n        \"min\": 102.5,\n        \"max\": 169.5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          169.5,\n          102.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import thư viện pandas\n",
        "import pandas as pd\n",
        "\n",
        "# Tạo dữ liệu\n",
        "data = {'Outcome': [0, 1], 'Glucose': [107.0, 140.0]}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Hiển thị bảng\n",
        "display(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "_NdSOKmvEYNQ",
        "outputId": "9f2e595d-2850-4e90-f091-0365b3cd1da0"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Outcome  Glucose\n",
              "0        0    107.0\n",
              "1        1    140.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-93bc9227-3e45-4848-a7dc-3371366ea5ed\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Outcome</th>\n",
              "      <th>Glucose</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>107.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>140.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93bc9227-3e45-4848-a7dc-3371366ea5ed')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-93bc9227-3e45-4848-a7dc-3371366ea5ed button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-93bc9227-3e45-4848-a7dc-3371366ea5ed');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f3529cc2-7da9-4d53-8c41-877ebcdd7b14\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f3529cc2-7da9-4d53-8c41-877ebcdd7b14')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f3529cc2-7da9-4d53-8c41-877ebcdd7b14 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_be9a96c6-6ec1-42dd-b6a6-1d09d1d6cc5a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_be9a96c6-6ec1-42dd-b6a6-1d09d1d6cc5a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Outcome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Glucose\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.33452377915607,\n        \"min\": 107.0,\n        \"max\": 140.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          140.0,\n          107.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import các thư viện cần thiết\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# Tạo dữ liệu mẫu cho nhóm \"healthy\" và \"diabetic\"\n",
        "np.random.seed(42)\n",
        "healthy = np.random.normal(loc=30, scale=15, size=1000)  # Phân phối chuẩn cho người khỏe mạnh\n",
        "diabetic = np.random.normal(loc=40, scale=20, size=1000)  # Phân phối chuẩn cho người tiểu đường\n",
        "\n",
        "# Kết hợp dữ liệu và tạo DataFrame ở dạng long-form\n",
        "data_combined = np.concatenate([healthy, diabetic])\n",
        "labels = ['healthy'] * len(healthy) + ['diabetic'] * len(diabetic)\n",
        "df_plot = pd.DataFrame({'SkinThickness': data_combined, 'Outcome': labels})\n",
        "\n",
        "# Tạo biểu đồ phân phối\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.kdeplot(data=df_plot, x='SkinThickness', hue='Outcome', common_norm=False, palette=['cyan', 'yellow'], shade=True)\n",
        "\n",
        "# Đặt tiêu đề và nhãn\n",
        "plt.title('SkinThickness')\n",
        "plt.xlabel('SkinThickness')\n",
        "plt.ylabel('Density')\n",
        "\n",
        "# Hiển thị biểu đồ\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 566
        },
        "id": "M7AhspmwEbBS",
        "outputId": "0d6f3f29-d8ab-49ad-b197-0c8bfbfbfc60"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import thư viện pandas\n",
        "import pandas as pd\n",
        "\n",
        "# Tạo dữ liệu\n",
        "data = {'Outcome': [0, 1], 'SkinThickness': [27.0, 32.0]}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Hiển thị bảng\n",
        "display(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "13z-iR1-EqyN",
        "outputId": "7748265b-cff0-4515-e610-9e3feea8ec04"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Outcome  SkinThickness\n",
              "0        0           27.0\n",
              "1        1           32.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e0d1f28f-f52a-4cd1-b9e6-e38a38441b88\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Outcome</th>\n",
              "      <th>SkinThickness</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>27.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>32.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0d1f28f-f52a-4cd1-b9e6-e38a38441b88')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e0d1f28f-f52a-4cd1-b9e6-e38a38441b88 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e0d1f28f-f52a-4cd1-b9e6-e38a38441b88');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-db2b3fe0-5307-44a2-8289-b0e52bf2df51\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-db2b3fe0-5307-44a2-8289-b0e52bf2df51')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-db2b3fe0-5307-44a2-8289-b0e52bf2df51 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_cf23318f-46eb-4afc-acae-0db891fda67e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_cf23318f-46eb-4afc-acae-0db891fda67e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Outcome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SkinThickness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5355339059327378,\n        \"min\": 27.0,\n        \"max\": 32.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          32.0,\n          27.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import các thư viện cần thiết\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# Tạo dữ liệu mẫu cho nhóm \"healthy\" và \"diabetic\"\n",
        "np.random.seed(42)\n",
        "healthy = np.random.normal(loc=72, scale=10, size=1000)  # Phân phối chuẩn cho người khỏe mạnh\n",
        "diabetic = np.random.normal(loc=75, scale=12, size=1000)  # Phân phối chuẩn cho người tiểu đường\n",
        "\n",
        "# Kết hợp dữ liệu và tạo DataFrame ở dạng long-form\n",
        "data_combined = np.concatenate([healthy, diabetic])\n",
        "labels = ['healthy'] * len(healthy) + ['diabetic'] * len(diabetic)\n",
        "df_plot = pd.DataFrame({'BloodPressure': data_combined, 'Outcome': labels})\n",
        "\n",
        "# Tạo biểu đồ phân phối\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.kdeplot(data=df_plot, x='BloodPressure', hue='Outcome', common_norm=False, palette=['cyan', 'yellow'], shade=True)\n",
        "\n",
        "# Đặt tiêu đề và nhãn\n",
        "plt.title('BloodPressure')\n",
        "plt.xlabel('BloodPressure')\n",
        "plt.ylabel('Density')\n",
        "\n",
        "# Hiển thị biểu đồ\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 566
        },
        "id": "1COYuMOFFKeu",
        "outputId": "b370f2b5-f940-47f4-f6ba-b730c0511c3c"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import thư viện pandas\n",
        "import pandas as pd\n",
        "\n",
        "# Tạo dữ liệu\n",
        "data = {'Outcome': [0, 1], 'BloodPressure': [70.0, 74.5]}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Hiển thị bảng\n",
        "display(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "l7IxpAZmFhgA",
        "outputId": "f51d635c-1a2d-436b-9aef-8c286195c0ec"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Outcome  BloodPressure\n",
              "0        0           70.0\n",
              "1        1           74.5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0100c5de-6d59-4200-80f2-63213b904d59\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Outcome</th>\n",
              "      <th>BloodPressure</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>70.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>74.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0100c5de-6d59-4200-80f2-63213b904d59')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0100c5de-6d59-4200-80f2-63213b904d59 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0100c5de-6d59-4200-80f2-63213b904d59');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a1b3c42a-fa39-47e8-bbc6-71f8626f202e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a1b3c42a-fa39-47e8-bbc6-71f8626f202e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a1b3c42a-fa39-47e8-bbc6-71f8626f202e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_d15ef877-cd06-4678-ba0c-87dd7fd2dd5a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d15ef877-cd06-4678-ba0c-87dd7fd2dd5a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Outcome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BloodPressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.181980515339464,\n        \"min\": 70.0,\n        \"max\": 74.5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          74.5,\n          70.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import các thư viện cần thiết\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd # Import pandas\n",
        "\n",
        "# Tạo dữ liệu mẫu cho nhóm \"healthy\" và \"diabetic\"\n",
        "np.random.seed(42)\n",
        "healthy = np.random.normal(loc=35, scale=10, size=1000)  # Phân phối chuẩn cho người khỏe mạnh\n",
        "diabetic = np.random.normal(loc=45, scale=15, size=1000)  # Phân phối chuẩn cho người tiểu đường\n",
        "\n",
        "# Lọc dữ liệu để khớp với phạm vi tuổi (20-80)\n",
        "healthy = [x for x in healthy if 20 <= x <= 80]\n",
        "diabetic = [x for x in diabetic if 20 <= x <= 80]\n",
        "\n",
        "# Kết hợp dữ liệu và tạo DataFrame ở dạng long-form\n",
        "data_combined = np.concatenate([healthy, diabetic])\n",
        "labels = ['healthy'] * len(healthy) + ['diabetic'] * len(diabetic)\n",
        "df_plot = pd.DataFrame({'Age': data_combined, 'Outcome': labels}) # Create DataFrame\n",
        "\n",
        "# Tạo biểu đồ phân phối\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.kdeplot(data=df_plot, x='Age', hue='Outcome', common_norm=False, palette=['cyan', 'yellow'], shade=True)\n",
        "\n",
        "# Đặt tiêu đề và nhãn\n",
        "plt.title('Age')\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Density')\n",
        "\n",
        "# Đặt giới hạn trục x\n",
        "plt.xlim(20, 80)\n",
        "\n",
        "# Hiển thị biểu đồ\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 668
        },
        "id": "anRa1jXy4sZT",
        "outputId": "b5c080b4-27b0-4c62-d856-f008b9980e40"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-681465503.py:23: FutureWarning: \n",
            "\n",
            "`shade` is now deprecated in favor of `fill`; setting `fill=True`.\n",
            "This will become an error in seaborn v0.14.0; please update your code.\n",
            "\n",
            "  sns.kdeplot(data=df_plot, x='Age', hue='Outcome', common_norm=False, palette=['cyan', 'yellow'], shade=True)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import các thư viện cần thiết\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Hàm để tạo và vẽ biểu đồ phân phối\n",
        "def plot_distribution(data_healthy, data_diabetic, title, xlim):\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    sns.kdeplot(data=data_healthy, shade=True, color='cyan', label='healthy')\n",
        "    sns.kdeplot(data=data_diabetic, shade=True, color='yellow', label='diabetic')\n",
        "    plt.title(title)\n",
        "    plt.xlabel(title)\n",
        "    plt.ylabel('Density')\n",
        "    plt.xlim(xlim)\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "# Tạo dữ liệu mẫu cho Pregnancies\n",
        "np.random.seed(42)\n",
        "healthy_pregnancies = np.random.normal(loc=2, scale=1.5, size=1000)  # Phân phối cho người khỏe mạnh\n",
        "diabetic_pregnancies = np.random.normal(loc=4, scale=2.5, size=1000)  # Phân phối cho người tiểu đường\n",
        "\n",
        "# Lọc dữ liệu để khớp với phạm vi (0-15)\n",
        "healthy_pregnancies = [x for x in healthy_pregnancies if 0 <= x <= 15]\n",
        "diabetic_pregnancies = [x for x in diabetic_pregnancies if 0 <= x <= 15]\n",
        "\n",
        "# Vẽ biểu đồ cho Pregnancies\n",
        "plot_distribution(healthy_pregnancies, diabetic_pregnancies, 'Pregnancies', (0, 15))\n",
        "\n",
        "# Tạo dữ liệu mẫu cho DiabetesPedigreeFunction\n",
        "np.random.seed(42)\n",
        "healthy_dpf = np.random.normal(loc=0.5, scale=0.2, size=1000)  # Phân phối cho người khỏe mạnh\n",
        "diabetic_dpf = np.random.normal(loc=0.8, scale=0.3, size=1000)  # Phân phối cho người tiểu đường\n",
        "\n",
        "# Lọc dữ liệu để khớp với phạm vi (0-2.5)\n",
        "healthy_dpf = [x for x in healthy_dpf if 0 <= x <= 2.5]\n",
        "diabetic_dpf = [x for x in diabetic_dpf if 0 <= x <= 2.5]\n",
        "\n",
        "# Vẽ biểu đồ cho DiabetesPedigreeFunction\n",
        "plot_distribution(healthy_dpf, diabetic_dpf, 'DiabetesPedigreeFunction', (0, 2.5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "KkYbL-MQ5NeP",
        "outputId": "5e52958c-45c4-4e60-d564-8bed8aaac32f"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2556868325.py:9: FutureWarning: \n",
            "\n",
            "`shade` is now deprecated in favor of `fill`; setting `fill=True`.\n",
            "This will become an error in seaborn v0.14.0; please update your code.\n",
            "\n",
            "  sns.kdeplot(data=data_healthy, shade=True, color='cyan', label='healthy')\n",
            "/tmp/ipython-input-2556868325.py:10: FutureWarning: \n",
            "\n",
            "`shade` is now deprecated in favor of `fill`; setting `fill=True`.\n",
            "This will become an error in seaborn v0.14.0; please update your code.\n",
            "\n",
            "  sns.kdeplot(data=data_diabetic, shade=True, color='yellow', label='diabetic')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2556868325.py:9: FutureWarning: \n",
            "\n",
            "`shade` is now deprecated in favor of `fill`; setting `fill=True`.\n",
            "This will become an error in seaborn v0.14.0; please update your code.\n",
            "\n",
            "  sns.kdeplot(data=data_healthy, shade=True, color='cyan', label='healthy')\n",
            "/tmp/ipython-input-2556868325.py:10: FutureWarning: \n",
            "\n",
            "`shade` is now deprecated in favor of `fill`; setting `fill=True`.\n",
            "This will become an error in seaborn v0.14.0; please update your code.\n",
            "\n",
            "  sns.kdeplot(data=data_diabetic, shade=True, color='yellow', label='diabetic')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import các thư viện cần thiết\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Tạo dữ liệu mẫu (giả sử không có giá trị thiếu)\n",
        "data = {\n",
        "    'Pregnancies': 0,\n",
        "    'Glucose': 0,\n",
        "    'BloodPressure': 0,\n",
        "    'SkinThickness': 0,\n",
        "    'Insulin': 0,\n",
        "    'BMI': 0,\n",
        "    'DiabetesPedigreeFunction': 0,\n",
        "    'Age': 0,\n",
        "    'Outcome': 0\n",
        "}\n",
        "df = pd.DataFrame([data])\n",
        "\n",
        "# Tính số lượng giá trị thiếu (ở đây là 0 cho tất cả cột)\n",
        "missing_values = df.isnull().sum()\n",
        "\n",
        "# Vẽ biểu đồ cột\n",
        "plt.figure(figsize=(10, 6))\n",
        "missing_values.plot(kind='bar', color='cyan')\n",
        "plt.title('Missing Values (count & %)')\n",
        "plt.xlabel('Columns')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=45)\n",
        "plt.ylim(0, 800)  # Giới hạn trục y để khớp với hình ảnh\n",
        "for i, v in enumerate(missing_values):\n",
        "    plt.text(i, v + 10, str(v), ha='center')  # Thêm nhãn giá trị trên cột\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "Wx_X1T575kbL",
        "outputId": "c2f1eaab-ac2b-419b-bb3a-434df387dfdb"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_feat1_feat2(feat1, feat2) :\n",
        "    D = data[(data['Outcome'] != 0)]\n",
        "    H = data[(data['Outcome'] == 0)]\n",
        "    trace0 = go.Scatter(\n",
        "        x = D[feat1],\n",
        "        y = D[feat2],\n",
        "        name = 'diabetic',\n",
        "        mode = 'markers',\n",
        "        marker = dict(color = '#FFD700',\n",
        "            line = dict(\n",
        "                width = 1)))\n",
        "\n",
        "    trace1 = go.Scatter(\n",
        "        x = H[feat1],\n",
        "        y = H[feat2],\n",
        "        name = 'healthy',\n",
        "        mode = 'markers',\n",
        "        marker = dict(color = '#7EC0EE',\n",
        "            line = dict(\n",
        "                width = 1)))\n",
        "\n",
        "    layout = dict(title = feat1 +\" \"+\"vs\"+\" \"+ feat2,\n",
        "                  yaxis = dict(title = feat2,zeroline = False),\n",
        "                  xaxis = dict(title = feat1, zeroline = False)\n",
        "                 )\n",
        "\n",
        "    plots = [trace0, trace1]\n",
        "\n",
        "    fig = dict(data = plots, layout=layout)\n",
        "    py.iplot(fig)"
      ],
      "metadata": {
        "id": "anBsghGs5tvC"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def barplot(var_select, sub) :\n",
        "    tmp1 = data[(data['Outcome'] != 0)]\n",
        "    tmp2 = data[(data['Outcome'] == 0)]\n",
        "    tmp3 = pd.DataFrame(pd.crosstab(data[var_select],data['Outcome']), )\n",
        "    tmp3['% diabetic'] = tmp3[1] / (tmp3[1] + tmp3[0]) * 100\n",
        "\n",
        "    color=['lightskyblue','gold' ]\n",
        "    trace1 = go.Bar(\n",
        "        x=tmp1[var_select].value_counts().keys().tolist(),\n",
        "        y=tmp1[var_select].value_counts().values.tolist(),\n",
        "        text=tmp1[var_select].value_counts().values.tolist(),\n",
        "        textposition = 'auto',\n",
        "        name='diabetic',opacity = 0.8, marker=dict(\n",
        "        color='gold',\n",
        "        line=dict(color='#000000',width=1)))\n",
        "\n",
        "\n",
        "    trace2 = go.Bar(\n",
        "        x=tmp2[var_select].value_counts().keys().tolist(),\n",
        "        y=tmp2[var_select].value_counts().values.tolist(),\n",
        "        text=tmp2[var_select].value_counts().values.tolist(),\n",
        "        textposition = 'auto',\n",
        "        name='healthy', opacity = 0.8, marker=dict(\n",
        "        color='lightskyblue',\n",
        "        line=dict(color='#000000',width=1)))\n",
        "\n",
        "    trace3 =  go.Scatter(\n",
        "        x=tmp3.index,\n",
        "        y=tmp3['% diabetic'],\n",
        "        yaxis = 'y2',\n",
        "        name='% diabetic', opacity = 0.6, marker=dict(\n",
        "        color='black',\n",
        "        line=dict(color='#000000',width=0.5\n",
        "        )))\n",
        "\n",
        "    layout = dict(title =  str(var_select)+' '+(sub),\n",
        "              xaxis=dict(),\n",
        "              yaxis=dict(title= 'Count'),\n",
        "              yaxis2=dict(range= [-0, 75],\n",
        "                          overlaying= 'y',\n",
        "                          anchor= 'x',\n",
        "                          side= 'right',\n",
        "                          zeroline=False,\n",
        "                          showgrid= False,\n",
        "                          title= '% diabetic'\n",
        "                         ))\n",
        "\n",
        "    fig = go.Figure(data=[trace1, trace2, trace3], layout=layout)\n",
        "    py.iplot(fig)"
      ],
      "metadata": {
        "id": "4rf_zsl755Wb"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define pie plot to visualize each variable repartition vs target modalities : Survived or Died (train)\n",
        "def plot_pie(var_select, sub) :\n",
        "    D = data[(data['Outcome'] != 0)]\n",
        "    H = data[(data['Outcome'] == 0)]\n",
        "\n",
        "    col =['Silver', 'mediumturquoise','#CF5C36','lightblue','magenta', '#FF5D73','#F2D7EE','mediumturquoise']\n",
        "\n",
        "    trace1 = go.Pie(values  = D[var_select].value_counts().values.tolist(),\n",
        "                    labels  = D[var_select].value_counts().keys().tolist(),\n",
        "                    textfont=dict(size=15), opacity = 0.8,\n",
        "                    hole = 0.5,\n",
        "                    hoverinfo = \"label+percent+name\",\n",
        "                    domain  = dict(x = [.0,.48]),\n",
        "                    name    = \"Diabetic\",\n",
        "                    marker  = dict(colors = col, line = dict(width = 1.5)))\n",
        "    trace2 = go.Pie(values  = H[var_select].value_counts().values.tolist(),\n",
        "                    labels  = H[var_select].value_counts().keys().tolist(),\n",
        "                    textfont=dict(size=15), opacity = 0.8,\n",
        "                    hole = 0.5,\n",
        "                    hoverinfo = \"label+percent+name\",\n",
        "                    marker  = dict(line = dict(width = 1.5)),\n",
        "                    domain  = dict(x = [.52,1]),\n",
        "                    name    = \"Healthy\" )\n",
        "\n",
        "    layout = go.Layout(dict(title = var_select + \" distribution by target <br>\"+(sub),\n",
        "                            annotations = [ dict(text = \"Diabetic\"+\" : \"+\"268\",\n",
        "                                                font = dict(size = 13),\n",
        "                                                showarrow = False,\n",
        "                                                x = .22, y = -0.1),\n",
        "                                            dict(text = \"Healthy\"+\" : \"+\"500\",\n",
        "                                                font = dict(size = 13),\n",
        "                                                showarrow = False,\n",
        "                                                x = .8,y = -.1)]))\n",
        "\n",
        "\n",
        "    fig  = go.Figure(data = [trace1,trace2],layout = layout)\n",
        "    py.iplot(fig)"
      ],
      "metadata": {
        "id": "bIbk-S3K6GH6"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = \\\n",
        "    data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0, np.nan)\n",
        "data = data.dropna(subset=['Glucose','Age'])\n",
        "\n",
        "# Vẽ\n",
        "plt.figure(figsize=(7,5))\n",
        "sns.scatterplot(\n",
        "    data=data, x='Glucose', y='Age',\n",
        "    hue=data['Outcome'].map({1:'diabetic',0:'healthy'}),\n",
        "    palette={'diabetic':'#FFD700','healthy':'#7EC0EE'}, alpha=0.8, s=40\n",
        ")\n",
        "plt.title('Glucose vs Age')\n",
        "plt.xlabel('Glucose')\n",
        "plt.ylabel('Age')\n",
        "plt.legend(title=None, loc='best')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "9OyNAes66UGc",
        "outputId": "f3957e3b-30e2-4d48-fdd0-8296b5ba49fc"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "palette ={0 : 'lightblue', 1 : 'gold'}\n",
        "edgecolor = 'black'\n",
        "\n",
        "fig = plt.figure(figsize=(12,8))\n",
        "\n",
        "ax1 = sns.scatterplot(x = data['Glucose'], y = data['Age'], hue = \"Outcome\",\n",
        "                    data = data, palette = palette, edgecolor=edgecolor)\n",
        "\n",
        "plt.annotate('N1', size=25, color='black', xy=(80, 30), xytext=(60, 35),\n",
        "            arrowprops=dict(facecolor='black', shrink=0.05),\n",
        "            )\n",
        "plt.plot([50, 120], [30, 30], linewidth=2, color = 'red')\n",
        "plt.plot([120, 120], [20, 30], linewidth=2, color = 'red')\n",
        "plt.plot([50, 120], [20, 20], linewidth=2, color = 'red')\n",
        "plt.plot([50, 50], [20, 30], linewidth=2, color = 'red')\n",
        "plt.title('Glucose vs Age')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "jmF7Cm-F8z_k",
        "outputId": "921578ca-1622-4331-84d6-0eb029dc940c"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+QAAAK9CAYAAACtq6aaAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzs3XVcFPkfBvBnF3bpUknFxm45sbu7sc7uPvX09OzTM049u7u7TsXiTLCwE0ERpUG6l935/aHH/ThYBYWdBZ7368UfzmeYeQZ3YD87M9+vRBAEAURERERERESkUVKxAxARERERERHlR2zIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIcsDcuXMhkUjEjkFERERajA05ERFRJvn4+GDs2LEoU6YMDA0NYWhoiAoVKmDMmDF48uSJ2PHyvMjISOjr60MikeDly5dixyEiIvpuumIHICIiyg3OnDkDZ2dn6Orqom/fvqhatSqkUilevXqF48ePY8OGDfDx8UGxYsXEjppnHTlyBBKJBDY2Nti3bx8WLFggdiQiIqLvwoaciIjoK968eYNevXqhWLFicHV1ha2tbZr6kiVLsH79ekilvPEsJ+3duxdt27ZFsWLFsH//fjbkRESU6/GdAxER0VcsXboUcXFx2LFjR7pmHAB0dXUxfvx42Nvbq93Gu3fvIJFIsHPnznQ1iUSCuXPnplnm7++PIUOGwM7ODnp6eihRogRGjRqF5OTk1HXevn2LHj16oECBAjA0NETt2rVx9uzZdNtfs2YNKlasCENDQ1hYWMDR0RH79+9Pt7/BgwfD2toaenp6qFixIrZv3/6VnwxQqVIlNGnSJN1ylUqFwoULo3v37qnLDh48iJo1a8LExASmpqaoXLkyVq1a9dV9AMD79+9x48YN9OrVC7169YKPjw/c3d0zXHfdunUoWbIkDAwMUKtWLdy4cQONGzdG48aN06yXlJSEOXPmoHTp0tDT04O9vT2mTp2KpKSkTGUiIiL6XrxCTkRE9BVnzpxB6dKl4eTkpJH9BQQEoFatWoiMjMTw4cNRrlw5+Pv74+jRo4iPj4dcLkdwcDDq1q2L+Ph4jB8/HgULFsSuXbvQsWNHHD16FF26dAEAbNmyBePHj0f37t0xYcIEJCYm4smTJ7hz5w769OkDAAgODkbt2rUhkUgwduxYWFpawsXFBUOGDEF0dDQmTpyoNquzszPmzp2LoKAg2NjYpC6/efMmAgIC0KtXLwDApUuX0Lt3bzRr1gxLliwBALx8+RJubm6YMGHCV38mBw4cgJGREdq3bw8DAwOUKlUK+/btQ926ddOst2HDBowdOxYNGjTATz/9hHfv3qFz586wsLBAkSJFUtdTqVTo2LEjbt68ieHDh6N8+fJ4+vQp/vzzT7x+/RonT57M1P8VERHRdxGIiIhIraioKAGA0Llz53S1iIgIITQ0NPUrPj4+tTZnzhzh///M+vj4CACEHTt2pNsOAGHOnDmp/+7fv78glUqFe/fupVtXpVIJgiAIEydOFAAIN27cSK3FxMQIJUqUEIoXLy4olUpBEAShU6dOQsWKFb94jEOGDBFsbW2FsLCwNMt79eolmJmZpTmu//L09BQACGvWrEmzfPTo0YKxsXHq906YMEEwNTUVUlJSvphFncqVKwt9+/ZN/feMGTOEQoUKCQqFInVZUlKSULBgQeGHH35Is3znzp0CAKFRo0apy/bs2SNIpdI0Pz9BEISNGzcKAAQ3N7dvyklERJQVvGWdiIjoC6KjowEAxsbG6WqNGzeGpaVl6te6deu+e38qlQonT55Ehw4d4OjomK7+z1Rq586dQ61atVC/fv3UmrGxMYYPH453797hxYsXAABzc3P4+fnh3r17Ge5PEAQcO3YMHTp0gCAICAsLS/1q1aoVoqKi8ODBA7V5y5Qpg2rVquHQoUOpy5RKJY4ePYoOHTrAwMAgNUdcXBwuXbqU5Z/JkydP8PTpU/Tu3Tt1We/evREWFoYLFy6kLvPw8MDHjx8xbNgw6Or+exNg3759YWFhkWabR44cQfny5VGuXLk0x9y0aVMAwJUrV7Kck4iIKKvYkBMREX2BiYkJACA2NjZdbdOmTbh06RL27t2bbfsLDQ1FdHQ0KlWq9MX1fH19UbZs2XTLy5cvn1oHgGnTpsHY2Bi1atWCg4MDxowZAzc3tzT7i4yMxObNm9N8uGBpaYlBgwYBAEJCQr6YxdnZGW5ubvD39wcAXL16FSEhIXB2dk5dZ/To0ShTpgzatGmDIkWKYPDgwTh//nwmfiKfBnMzMjJCyZIl4e3tDW9vb+jr66N48eLYt29fmp8JAJQuXTrN9+vq6qJ48eJplnl5eeH58+fpjrlMmTKZOmYiIqLswGfIiYiIvsDMzAy2trZ49uxZuto/z5S/e/fuq9v558r2fymVyu/K9zXly5eHp6cnzpw5g/Pnz+PYsWNYv349Zs+ejXnz5kGlUgEA+vXrhwEDBmS4jSpVqnxxH87Ozpg+fTqOHDmCiRMn4vDhwzAzM0Pr1q1T17GyssKjR49w4cIFuLi4wMXFBTt27ED//v2xa9cutdsWBAEHDhxAXFwcKlSokK4eEhKC2NjYDO9g+BKVSoXKlStjxYoVGda/NEAfERFRdmFDTkRE9BXt2rXD1q1bcffuXdSqVeubtvHPLdORkZFplv9zVfcflpaWMDU1zfADgP9XrFgxeHp6plv+6tWr1Po/jIyM4OzsDGdnZyQnJ6Nr165YuHAhpk+fDktLS5iYmECpVKJ58+bfcmgoUaIEatWqhUOHDmHs2LE4fvw4OnfuDD09vTTryeVydOjQAR06dIBKpcLo0aOxadMmzJo1K91V7X9cu3YNfn5+mD9/furV/39ERERg+PDhOHnyJPr165d6zN7e3mlGfk9JScG7d+/SfLBQqlQpPH78GM2aNVP7YQkREVFO4y3rREREXzF16lQYGhpi8ODBCA4OTlcXBOGr2zA1NUWhQoVw/fr1NMvXr1+f5t9SqRSdO3fGX3/9BQ8PD7X7atu2Le7evYtbt26l1uLi4rB582YUL1489Wryx48f03y/XC5HhQoVIAgCFAoFdHR00K1bNxw7dizDDwFCQ0O/emzAp6vkt2/fxvbt2xEWFpbmdvWMckil0tQG+UvTjP1zu/rPP/+M7t27p/kaNmwYHBwcUm9bd3R0RMGCBbFlyxakpKSkbmPfvn2IiIhIs92ePXvC398fW7ZsSbfPhIQExMXFZeq4iYiIvodEyMy7CCIionzu1KlT6N27N+RyOfr27YuqVatCEAT4+Phg//798Pf3x759+1Kn+Zo7dy7mzZuXplmfPn06Fi9ejCFDhsDR0RHXr1/H69evcf/+fcyZMyd1LnJ/f384OjoiOjo6dUquwMBAHDlyBDdv3oS5uTmCg4NRtWpVJCYmYvz48ShQoAB27dqFx48f49ixY6nTntWsWRM2NjaoV68erK2t8fLlS6xduxYtW7bE6dOnAXya9szJyQmhoaEYNmwYKlSogPDwcDx48ACXL19GeHj4V38+fn5+KFq0KIyNjSGTyRAUFASZTJZa79KlC8LDw9G0aVMUKVIEvr6+WLNmDYoXL4779+9DKk1/jSApKQk2NjZo3LgxTpw4keF+p0yZglWrVsHf3x9WVlZYu3Ytxo0bhwYNGqBnz5549+4ddu7cCXNzc9jb26cO1qZSqdChQwe4uLjA2dkZ9erVg1KpxKtXr3D48GFcuHAhw0H1iIiIspVYw7sTERHlNt7e3sKoUaOE0qVLC/r6+oKBgYFQrlw5YeTIkcKjR4/SrPvfac8EQRDi4+OFIUOGCGZmZoKJiYnQs2dPISQkJN20Z4IgCL6+vkL//v0FS0tLQU9PTyhZsqQwZswYISkpKXWdN2/eCN27dxfMzc0FfX19oVatWsKZM2fSbGfTpk1Cw4YNhYIFCwp6enpCqVKlhJ9//lmIiopKs15wcLAwZswYwd7eXpDJZIKNjY3QrFkzYfPmzZn++dSrV08AIAwdOjRd7ejRo0LLli0FKysrQS6XC0WLFhVGjBghBAYGqt3esWPHBADCtm3b1K5z9epVAYCwatWq1GWrV68WihUrJujp6Qm1atUS3NzchJo1awqtW7dO873JycnCkiVLhIoVKwp6enqChYWFULNmTWHevHnpfj5EREQ5gVfIiYiIKE9TqVSwtLRE165dM7xFnYiISCx8hpyIiIjyjMTExHTP9O/evRvh4eFo3LixOKGIiIjU4BVyIiIiyjOuXr2Kn376CT169EDBggXx4MEDbNu2DeXLl8f9+/chl8vFjkhERJSK054RERFRnlG8eHHY29tj9erVCA8PR4ECBdC/f38sXryYzTgREWkdXiEnIiIiIiIiEgGfISciIiIiIiISARtyIiIiIiIiIhHk+WfIVSoVAgICYGJiAolEInYcIiIiIiIiyuMEQUBMTAzs7Owglaq/Dp7nG/KAgADY29uLHYOIiIiIiIjymQ8fPqBIkSJq63m+ITcxMQHw6QdhamoqchoiIiIiIiLK66Kjo2Fvb5/aj6qT5xvyf25TNzU1ZUNOREREREREGvO1x6Y5qBsRERERERGRCNiQExEREREREYmADTkRERERERGRCPL8M+RERERERESUdUqlEgqFQuwYWklHRwe6urrfPbU2G3IiIiIiIiJKIzY2Fn5+fhAEQewoWsvQ0BC2traQy+XfvA025ERERERERJRKqVTCz88PhoaGsLS0/O6rwHmNIAhITk5GaGgofHx84ODgAKn0254GZ0NOREREREREqRQKBQRBgKWlJQwMDMSOo5UMDAwgk8ng6+uL5ORk6Ovrf9N2OKgbERERERERpcMr41/2rVfF02wjG3IQERERERERURaxISciIiIiIiISARtyIiIiIiIiIhGwISciIiIiIqIs+fDhAwYPHgw7OzvI5XIUK1YMEyZMwMePHzO9jXfv3kEikeDRo0c5F1TLsSEnIiIiIiKiTHv79i0cHR3h5eWFAwcOwNvbGxs3boSrqyvq1KmD8PBwsSPmGmzIiYiIiIiIKNPGjBkDuVyOixcvolGjRihatCjatGmDy5cvw9/fH7/++iuAT6O0nzx5Ms33mpubY+fOnQCAEiVKAACqV68OiUSCxo0bp663fft2VKxYEXp6erC1tcXYsWNTa+/fv0enTp1gbGwMU1NT9OzZE8HBwan1uXPnolq1ati+fTuKFi0KY2NjjB49GkqlEkuXLoWNjQ2srKywcOHCNNkiIyMxdOhQWFpawtTUFE2bNsXjx4+z8SeXHhtyIiIiIiIiypTw8HBcuHABo0ePTjdHuY2NDfr27YtDhw5BEISvbuvu3bsAgMuXLyMwMBDHjx8HAGzYsAFjxozB8OHD8fTpU5w+fRqlS5cGAKhUKnTq1Anh4eG4du0aLl26hLdv38LZ2TnNtt+8eQMXFxecP38eBw4cwLZt29CuXTv4+fnh2rVrWLJkCWbOnIk7d+6kfk+PHj0QEhICFxcX3L9/HzVq1ECzZs1y9Iq/bo5tmYiIiIiIiPIULy8vCIKA8uXLZ1gvX748IiIiEBoa+tVtWVpaAgAKFiwIGxub1OULFizA5MmTMWHChNRlP/zwAwDA1dUVT58+hY+PD+zt7QEAu3fvRsWKFXHv3r3U9VQqFbZv3w4TExNUqFABTZo0gaenJ86dOwepVIqyZctiyZIluHLlCpycnHDz5k3cvXsXISEh0NPTAwAsW7YMJ0+exNGjRzF8+PBv+Gl9HRtyIiIiIiIiypLMXAH/FiEhIQgICECzZs0yrL98+RL29vapzTgAVKhQAebm5nj58mVqQ168eHGYmJikrmNtbQ0dHR1IpdI0y0JCQgAAjx8/RmxsLAoWLJhmfwkJCXjz5k22Hd9/sSEnIiIiIiKiTCldujQkEglevnyJLl26pKu/fPkSFhYWsLS0hEQiSde4KxSKL27/v7fBfyuZTJbm3xKJJMNlKpUKABAbGwtbW1tcvXo13bbMzc2zJVNG+Aw5ERERERERZUrBggXRokULrF+/HgkJCWlqQUFB2LdvH5ydnSGRSGBpaYnAwMDUupeXF+Lj41P/LZfLAQBKpTJ1mYmJCYoXLw5XV9cM91++fHl8+PABHz58SF324sULREZGokKFCt98XDVq1EBQUBB0dXVRunTpNF+FChX65u1+DRtyIiIiIiIiyrS1a9ciKSkJrVq1wvXr1/HhwwecP38eLVq0QOHChVNHL2/atCnWrl2Lhw8fwsPDAyNHjkxzldrKygoGBgY4f/48goODERUVBeDTKOnLly/H6tWr4eXlhQcPHmDNmjUAgObNm6Ny5cro27cvHjx4gLt376J///5o1KgRHB0dv/mYmjdvjjp16qBz5864ePEi3r17B3d3d/z666/w8PD4jp/Wl7EhJyIiIvqCyMhI/LF8BVp37IzWHTrhl19nws/PT+xYRESicXBwgIeHB0qWLImePXuiVKlSGD58OJo0aYJbt26hQIECAIDly5fD3t4eDRo0QJ8+fTBlyhQYGhqmbkdXVxerV6/Gpk2bYGdnh06dOgEABgwYgJUrV2L9+vWoWLEi2rdvDy8vLwCfbjM/deoULCws0LBhQzRv3hwlS5bEoUOHvuuYJBIJzp07h4YNG2LQoEEoU6YMevXqBV9fX1hbW3/Xtr+4XyGnnsbXEtHR0TAzM0NUVBRMTU3FjkNERES5iJeXFwYOH4mmfQajav3GkEgk8HryEOe2rsWcX6aiWdMmYkckIsp2iYmJ8PHxQYkSJaCvry92HK31pZ9TZvtQDupGRERElAFBEDBi7HgMXbgSZgX/fX6wTNUaKLF8A2ZPGIraTrVgZGQkYkoiIsrNeMs6ERERUQZu374Nu3KV0jTj/5DJ9VCvU0/s3b9fhGRERJRXsCEnIiIiysDDx49RskoNtXWH6o548OixBhMREVFew4aciIiIKAMW5uaIjQxXW48O/whzMzMNJiIioryGDTkRERFRBtq3a4eHrufV1t1PH8WAfn01mIiIiPIaNuREREREGTAxMUHrpo1xevMa/HdSmjsXzsBUR0CFChVESkdERHkBR1knIiIiUmPalMnYuHkLVo0diKIVKkNXJofPs0eo71QLWzduEDseERHlcmzIiYiIiL5g5PBhGDZkMJ4/fw6FQoGKFedwXl4iIsoWot6yrlQqMWvWLJQoUQIGBgYoVaoUfvvttzS3hQmCgNmzZ8PW1hYGBgZo3rw5vLy8RExNRERE+Y2Ojg6qVKmCmjVrshknIqJsI2pDvmTJEmzYsAFr167Fy5cvsWTJEixduhRr1qxJXWfp0qVYvXo1Nm7ciDt37sDIyAitWrVCYmKiiMmJiIiIiIiIvo+oDbm7uzs6deqEdu3aoXjx4ujevTtatmyJu3fvAvh0dXzlypWYOXMmOnXqhCpVqmD37t0ICAjAyZMnxYxORERERERE3yg2Nhaz581Ho5at0bRdRzRs0Qqz581HbGxsju973bp1KF68OPT19eHk5JTaf4pB1Ia8bt26cHV1xevXrwEAjx8/xs2bN9GmTRsAgI+PD4KCgtC8efPU7zEzM4OTkxNu3bqV4TaTkpIQHR2d5ouIiIiIiIi0Q2xsLDp37wlp0bIYv3o7xq7YhAlrdkBatCw6d++Zo035oUOHMGnSJMyZMwcPHjxA1apV0apVK4SEhOTYPr9E1Ib8l19+Qa9evVCuXDnIZDJUr14dEydORN++n+b0DAoKAgBYW1un+T5ra+vU2n8tWrQIZmZmqV/29vY5exBERERERESUaUuXr0B95wGoUrchJBIJAEAikaBK3Yao7zwAS5evyLF9r1ixAsOGDcOgQYNQoUIFbNy4EYaGhti+fXuO7fNLRG3IDx8+jH379mH//v148OABdu3ahWXLlmHXrl3fvM3p06cjKioq9evDhw/ZmJiIiIiIiIi+xzU3d1Su0yDDWuU6DXDNzT1H9pucnIz79++nuQNbKpWiefPmau/AzmmiTnv2888/p14lB4DKlSvD19cXixYtwoABA2BjYwMACA4Ohq2tber3BQcHo1q1ahluU09PD3p6ejmenYiIiIiIiLJORyZPvTL+XxKJBDoyeY7sNywsDEqlMsM7sF+9epUj+/waUa+Qx8fHQypNG0FHRwcqlQoAUKJECdjY2MDV1TW1Hh0djTt37qBOnToazUpERERERETfT6lITjPV9f8TBAFKRbKGE4lH1CvkHTp0wMKFC1G0aFFUrFgRDx8+xIoVKzB48GAAnz4dmThxIhYsWAAHBweUKFECs2bNgp2dHTp37ixmdCIiIiIiIvoGjerVxdNbN1ClbsN0tae3bqBRvbo5st9ChQpBR0cHwcHBaZYHBwen3p2taaI25GvWrMGsWbMwevRohISEwM7ODiNGjMDs2bNT15k6dSri4uIwfPhwREZGon79+jh//jz09fVFTE5ERERERETfYurkSejcvSeAT8+MSyQSCIKAp7du4OahXTh59HCO7Fcul6NmzZpwdXVNvcCrUqng6uqKsWPH5sg+v0YiqLtXII+Ijo6GmZkZoqKiYGpqKnYcIiIiIiIirZaYmAgfHx+UKFEixy6ExsbGYunyFbjm5g4dmRxKRTIa1auLqZMnwdjYOEf2CXya9mzAgAHYtGkTatWqhZUrV+Lw4cN49epVumfLv+ZLP6fM9qGiXiEnIiIiIiKi/MfY2Bjz58z++orZzNnZGaGhoZg9ezaCgoJQrVo1nD9/PsvNeHZhQ05ERERERET5xtixY0W7Rf2/RB1lnYiIiIiIiCi/YkNOREREREREJAI25EREREREREQiYENOREREREREJAI25EREREREREQiYENOREREREREJAI25EREREREREQiYENOREREREREJAI25EREREREREQiYENOREREREREJAI25ERERERERKRRsbGxWDBvMtq3dED3dvZo16I0FsybjNjY2Bzb5/Xr19GhQwfY2dlBIpHg5MmTObavzGJDTkRERERERBoTGxuL3t3ro7b9Svy1yhtHl/vhzOo3qG2/Er2718+xpjwuLg5Vq1bFunXrcmT730JX7ABERERERESUf6xcPgcTej5F87qq1GUSCT7/+ylWLp+DmXOWZ/t+27RpgzZt2mT7dr8Hr5ATERERERGRxtx2O41mdVQZ1prVUeG222kNJxIPG3IiIiIiIiLSGH1ZIiSSjGsSCaAvS9JsIBGxISciIiIiIiKNSVToQxAyrgkCkKjQ02wgEbEhJyIiIiIiIo2pXa8jXG9l3Iq63pKidr2OGk4kHg7qRkRERERERBozcfI89O7uCuApmtVRQSL5dGXc9ZYUqw5XwYGj88SOqDFsyImIiIiIiEhjjI2NceDoTaxcPgcrD56GviwJiQo91K7XEQeOzoOxsXGO7Dc2Nhbe3t6p//bx8cGjR49QoEABFC1aNEf2+TVsyImIiIiIiEijjI2NP09tlv3Tm6nj4eGBJk2apP570qRJAIABAwZg586dGsvx/9iQExERERERUZ7XuHFjCOpGkxMJB3UjIiIiIiIiEgEbciIiIiIiIiIRsCEnIiIiIiIiEgEbciIiIiIiIiIRsCEnIiIiIiKidLRtADRtkx0/HzbkRERERERElEpHRwcAkJycLHIS7RYfHw8AkMlk37wNTntGREREREREqXR1dWFoaIjQ0FDIZDJIpbyO+/8EQUB8fDxCQkJgbm6e+gHGt2BDTkRERERERKkkEglsbW3h4+MDX19fseNoLXNzc9jY2HzXNtiQExERERERURpyuRwODg68bV0NmUz2XVfG/8GGnIiIiIiIiNKRSqXQ19cXO0aexocBiIiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiIiIiIiETAhpyIiIiIiIhIBGzIiYiI8riQkBC8efMGSUlJYkchIiKi/6MrdgAiIiLKGW7u7vht0RLoGpvAxLwAAn28Ub1yRSz67Tfo6+uLHY+IiCjfY0NORESUB12/cQPzli7H4LnLYGBsnLr82e0b6ObcC6eOHYWuLt8GEBERiYm3rBMREeVBcxcuwtAFK9I04wBQqXYDFK3uhFOnTouUjIiIiP7BhpyIiCiPef36NQoUKQY9fYMM6/U7dMeeg4c0nIqIiIj+iw05ERFRHvPx40eYW1qrrRsYGyORA7wRERGJjg05ERFRHlO6dGn4e71UWw/64As7G/UNOxEREWkGG3IiIqI8xtLSEiZ6Mvi/9c6wfn7nRowfPUrDqYiIiOi/2JATERHlQetW/okjy+bj/pWLUCqVAICIkGDsWTwHdapURLVq1cQNSERERJAIgiCIHSInRUdHw8zMDFFRUTA1NRU7DhERkcbExMRgy7btOH/5MiRSXZibGmP8qJGoV6+e2NGIiIjytMz2oWzIiYiIiIiIiLJRZvtQ3rJOREREREREJAI25EREREREREQiYENOREREREREJAI25EREREREREQiYENOREREREREJAI25EREREREREQiYENOREREREREJAI25EREREREREQi0BU7ABERERFpj/DwcGzf8ifcb/4FCQSULe+EkWNnomjRomJHIyLKc0S9Ql68eHFIJJJ0X2PGjAEAJCYmYsyYMShYsCCMjY3RrVs3BAcHixmZiIiIKM/y9PRE7241UbXQ7zi65DGO/fEE3Zy2YPzwOnC95CJ2PCKiPEciCIIg1s5DQ0OhVCpT//3s2TO0aNECV65cQePGjTFq1CicPXsWO3fuhJmZGcaOHQupVAo3N7dM7yM6OhpmZmaIioqCqalpThwGERERUa4nCALat6qEnXNfwLJA2lpSMtBpgj2O/vUCxsbG4gQkIspFMtuHinqF3NLSEjY2NqlfZ86cQalSpdCoUSNERUVh27ZtWLFiBZo2bYqaNWtix44dcHd3x+3bt8WMTURERJTn3HJ3h1OFwHTNOADoyYGhnYNxYN9WzQcjIsrDtGZQt+TkZOzduxeDBw+GRCLB/fv3oVAo0Lx589R1ypUrh6JFi+LWrVtqt5OUlITo6Og0X0RERET0Zc+e3kPtyhFq63WqJePZY3cNJiIiyvu0piE/efIkIiMjMXDgQABAUFAQ5HI5zM3N06xnbW2NoKAgtdtZtGgRzMzMUr/s7e1zMDURERFR3mBmbomQcJnaeshHwNzCUoOJiIjyPq1pyLdt24Y2bdrAzs7uu7Yzffp0REVFpX59+PAhmxISERER5V3t2nfCsb9toG50oR2nrdD7x3GaDUVElMdpRUPu6+uLy5cvY+jQoanLbGxskJycjMjIyDTrBgcHw8bGRu229PT0YGpqmuaLiIiIiL7M2NgYTVoOxfyN5lCp0tYOnDOAUq8hypUrJ044IqI8SivmId+xYwesrKzQrl271GU1a9aETCaDq6srunXrBuDTVBzv379HnTp1xIpKRERElGeN/2k2dm6zQPvxq1GtTBT05AI8Xhijdv2uWL1+qdjxiIjyHFGnPQMAlUqFEiVKoHfv3li8eHGa2qhRo3Du3Dns3LkTpqamGDfu021S7u6ZH1CE054RERHRfwmCgJs3b2L/4SOIj09Ag7q10ad3bxgaGn7X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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.loc[:,'N1']=0\n",
        "data.loc[(data['Age']<=30) & (data['Glucose']<=120),'N1']=1"
      ],
      "metadata": {
        "id": "RBCerIqe87g6"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 0) Thư viện\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# --- 1) Đọc & làm sạch tối thiểu\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "data[cols_fix] = data[cols_fix].replace(0, np.nan)\n",
        "\n",
        "# --- 2) Tạo cờ N1 = 1 nếu (Glucose ≤120 & Age ≤30), ngược lại 0\n",
        "data = data.dropna(subset=['Glucose','Age'])  # để điều kiện có dữ liệu\n",
        "data['N1'] = ((data['Glucose'] <= 120) & (data['Age'] <= 30)).astype(int)\n",
        "\n",
        "# Nhãn Outcome đẹp để vẽ hue/legend đúng thứ tự (diabetic trước, healthy sau)\n",
        "data['Outcome_label'] = data['Outcome'].map({1:'diabetic', 0:'healthy'})\n",
        "data['Outcome_label'] = pd.Categorical(data['Outcome_label'],\n",
        "                                       categories=['diabetic','healthy'],\n",
        "                                       ordered=True)\n",
        "\n",
        "# --- 3) Bảng đếm cho bar chart\n",
        "count_df = (\n",
        "    data.groupby(['N1','Outcome_label'])\n",
        "        .size().reset_index(name='Count')\n",
        ")\n",
        "\n",
        "# Đảm bảo đủ cả 4 tổ hợp (0/1 x 2 nhãn); nếu thiếu sẽ thêm 0\n",
        "full = pd.MultiIndex.from_product([[0,1], ['diabetic','healthy']],\n",
        "                                  names=['N1','Outcome_label'])\n",
        "count_df = count_df.set_index(['N1','Outcome_label']).reindex(full, fill_value=0).reset_index()\n",
        "\n",
        "# --- 4) Tính % diabetic theo từng nhóm N1 cho line chart\n",
        "pct_df = (\n",
        "    count_df.pivot(index='N1', columns='Outcome_label', values='Count')\n",
        "            .fillna(0).astype(int)\n",
        ")\n",
        "pct_df['pct_diabetic'] = (pct_df['diabetic'] / (pct_df['diabetic'] + pct_df['healthy']).replace(0, np.nan)) * 100\n",
        "pct_df = pct_df.reset_index()\n",
        "\n",
        "# --- 5) Vẽ\n",
        "fig, ax1 = plt.subplots(figsize=(8.5, 5.2))\n",
        "\n",
        "palette = {'diabetic':'#FFD700', 'healthy':'#7EC0EE'}\n",
        "\n",
        "bars = sns.barplot(\n",
        "    data=count_df, x='N1', y='Count',\n",
        "    hue='Outcome_label', hue_order=['diabetic','healthy'],\n",
        "    palette=palette, ax=ax1\n",
        ")\n",
        "\n",
        "# số trên mỗi cột\n",
        "for p in bars.patches:\n",
        "    ax1.text(p.get_x()+p.get_width()/2, p.get_height()+5,\n",
        "             f\"{int(p.get_height())}\", ha='center', va='bottom', fontsize=11)\n",
        "\n",
        "ax1.set_xlabel('')\n",
        "ax1.set_ylabel('Count')\n",
        "ax1.set_xticklabels([0,1])  # hiển thị 0 và 1 như hình\n",
        "\n",
        "# trục phụ % diabetic\n",
        "ax2 = ax1.twinx()\n",
        "line = ax2.plot(pct_df['N1'], pct_df['pct_diabetic'],\n",
        "                color='gray', marker='o', linewidth=2, label='% diabetic')\n",
        "ax2.set_ylabel('% diabetic')\n",
        "\n",
        "# gộp legend: bars (2 mục) + line (1 mục)\n",
        "handles1, labels1 = ax1.get_legend_handles_labels()\n",
        "ax1.legend_.remove()  # bỏ legend mặc định của seaborn\n",
        "handles = handles1 + line\n",
        "labels = labels1 + ['% diabetic']\n",
        "ax1.legend(handles, labels, loc='upper right', frameon=True)\n",
        "\n",
        "# tiêu đề y như ảnh\n",
        "plt.title('N1 : Glucose \\u2264 120 and Age \\u2264 30', fontsize=13)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 615
        },
        "id": "IfKq3tfC-f8j",
        "outputId": "300aea78-0209-42eb-9335-298100ef4333"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-765781326.py:24: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
            "  data.groupby(['N1','Outcome_label'])\n",
            "/tmp/ipython-input-765781326.py:59: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.\n",
            "  ax1.set_xticklabels([0,1])  # hiển thị 0 và 1 như hình\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 850x520 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Đọc dữ liệu\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "\n",
        "# Thay 0 bằng NaN cho các biến đo lường\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "data[cols_fix] = data[cols_fix].replace(0, np.nan)\n",
        "\n",
        "# Tạo N1 = 1 nếu Glucose ≤ 120 và Age ≤ 30\n",
        "df = data.dropna(subset=['Glucose','Age']).copy()\n",
        "df['N1'] = ((df['Glucose'] <= 120) & (df['Age'] <= 30)).astype(int)\n",
        "\n",
        "# Đếm N1 trong từng nhóm Outcome\n",
        "c_diab = df.loc[df['Outcome']==1,'N1'].value_counts().reindex([0,1], fill_value=0)\n",
        "c_healthy = df.loc[df['Outcome']==0,'N1'].value_counts().reindex([0,1], fill_value=0)\n",
        "total_diab = int((df['Outcome']==1).sum())\n",
        "total_healthy = int((df['Outcome']==0).sum())\n",
        "\n",
        "# Hàm định dạng phần trăm\n",
        "def autopct_fmt(values):\n",
        "    def _fmt(pct):\n",
        "        return f\"{pct:.1f}%\"\n",
        "    return _fmt\n",
        "\n",
        "# Vẽ 2 donut chart\n",
        "colors = ['#c7c7c7','#69d1c5']  # xám cho 0, xanh ngọc cho 1\n",
        "labels = ['0','1']\n",
        "\n",
        "fig, axes = plt.subplots(1, 2, figsize=(10, 6))\n",
        "\n",
        "# Donut trái - Diabetic\n",
        "axes[0].pie(c_diab.values, startangle=90, colors=colors,\n",
        "            wedgeprops=dict(width=0.35, edgecolor='white'),\n",
        "            autopct=autopct_fmt(c_diab.values), pctdistance=0.85)\n",
        "axes[0].text(0, -1.25, f\"Diabetic : {total_diab}\", ha='center', va='center', fontsize=11)\n",
        "\n",
        "# Donut phải - Healthy\n",
        "axes[1].pie(c_healthy.values, startangle=90, colors=colors,\n",
        "            wedgeprops=dict(width=0.35, edgecolor='white'),\n",
        "            autopct=autopct_fmt(c_healthy.values), pctdistance=0.85)\n",
        "axes[1].text(0, -1.25, f\"Healthy : {total_healthy}\", ha='center', va='center', fontsize=11)\n",
        "\n",
        "# Tiêu đề và legend\n",
        "fig.suptitle('N1 distribution by target\\n(Glucose <= 120 and Age <= 30)', fontsize=14, y=0.98)\n",
        "fig.legend(labels, loc='center right', bbox_to_anchor=(1.04, 0.55), frameon=False)\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.0, 0.92, 0.92])\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 603
        },
        "id": "O3GKjbT3_VGZ",
        "outputId": "60ecb6c2-437d-480b-99e7-83575384b4d1"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 0) Thư viện\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# --- 1) Đọc & làm sạch tối thiểu\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "data[cols_fix] = data[cols_fix].replace(0, np.nan)\n",
        "\n",
        "# --- 2) Tạo cờ N2 = 1 nếu BMI ≤ 30, ngược lại 0\n",
        "df = data.dropna(subset=['BMI']).copy()\n",
        "df['N2'] = (df['BMI'] <= 30).astype(int)\n",
        "\n",
        "# Nhãn Outcome để vẽ hue theo đúng màu\n",
        "df['Outcome_label'] = df['Outcome'].map({1:'diabetic', 0:'healthy'})\n",
        "df['Outcome_label'] = pd.Categorical(df['Outcome_label'],\n",
        "                                     categories=['diabetic','healthy'],\n",
        "                                     ordered=True)\n",
        "\n",
        "# --- 3) Chuẩn bị bảng đếm cho bar chart\n",
        "count_df = (\n",
        "    df.groupby(['N2','Outcome_label'])\n",
        "      .size().reset_index(name='Count')\n",
        ")\n",
        "\n",
        "# Bảo đảm đủ tổ hợp (0/1 × 2 nhãn)\n",
        "full = pd.MultiIndex.from_product([[0,1], ['diabetic','healthy']],\n",
        "                                  names=['N2','Outcome_label'])\n",
        "count_df = (count_df.set_index(['N2','Outcome_label'])\n",
        "                    .reindex(full, fill_value=0)\n",
        "                    .reset_index())\n",
        "\n",
        "# --- 4) Tính % diabetic theo từng nhóm N2 cho line chart\n",
        "pct_df = (count_df.pivot(index='N2', columns='Outcome_label', values='Count')\n",
        "                   .fillna(0).astype(int))\n",
        "pct_df['pct_diabetic'] = (pct_df['diabetic'] /\n",
        "                          (pct_df['diabetic'] + pct_df['healthy']).replace(0, np.nan)) * 100\n",
        "pct_df = pct_df.reset_index()\n",
        "\n",
        "# --- 5) Vẽ\n",
        "fig, ax1 = plt.subplots(figsize=(8.5, 5.2))\n",
        "\n",
        "palette = {'diabetic':'#FFD700', 'healthy':'#7EC0EE'}\n",
        "\n",
        "bars = sns.barplot(\n",
        "    data=count_df, x='N2', y='Count',\n",
        "    hue='Outcome_label', hue_order=['diabetic','healthy'],\n",
        "    palette=palette, ax=ax1\n",
        ")\n",
        "\n",
        "# Số trên cột\n",
        "for p in bars.patches:\n",
        "    ax1.text(p.get_x()+p.get_width()/2, p.get_height()+5,\n",
        "             f\"{int(p.get_height())}\", ha='center', va='bottom', fontsize=11)\n",
        "\n",
        "ax1.set_xlabel('')\n",
        "ax1.set_ylabel('Count')\n",
        "ax1.set_xticklabels([0, 1])\n",
        "\n",
        "# Trục phụ: % diabetic\n",
        "ax2 = ax1.twinx()\n",
        "line = ax2.plot(pct_df['N2'], pct_df['pct_diabetic'],\n",
        "                color='gray', marker='o', linewidth=2, label='% diabetic')\n",
        "ax2.set_ylabel('% diabetic')\n",
        "\n",
        "# Legend gộp: 2 cột + 1 line\n",
        "handles1, labels1 = ax1.get_legend_handles_labels()\n",
        "ax1.legend_.remove()\n",
        "handles = handles1 + line\n",
        "labels = labels1 + ['% diabetic']\n",
        "ax1.legend(handles, labels, loc='upper right', frameon=True)\n",
        "\n",
        "plt.title('N2 : BMI \\u2264 30', fontsize=13)  # \\u2264 là ký hiệu ≤\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 615
        },
        "id": "RwfMSj4cAKQx",
        "outputId": "ed37b814-a55c-4ad8-b4a8-7df1150ba995"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3591431664.py:24: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
            "  df.groupby(['N2','Outcome_label'])\n",
            "/tmp/ipython-input-3591431664.py:60: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.\n",
            "  ax1.set_xticklabels([0, 1])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 850x520 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 0) Thư viện\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# --- 1) Đọc & làm sạch tối thiểu\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "data[cols_fix] = data[cols_fix].replace(0, np.nan)\n",
        "\n",
        "# Chỉ giữ các hàng có BMI để xét N2\n",
        "df = data.dropna(subset=['BMI']).copy()\n",
        "\n",
        "# --- 2) Tạo cờ N2 = 1 nếu BMI ≤ 30, ngược lại 0\n",
        "df['N2'] = (df['BMI'] <= 30).astype(int)\n",
        "\n",
        "# --- 3) Đếm theo target (Outcome)\n",
        "total_diab    = int((df['Outcome'] == 1).sum())\n",
        "total_healthy = int((df['Outcome'] == 0).sum())\n",
        "\n",
        "# Đếm N2=0/1 trong mỗi nhóm target (đảm bảo thứ tự [0,1])\n",
        "c_diab    = df.loc[df['Outcome'] == 1, 'N2'].value_counts().reindex([0,1], fill_value=0)\n",
        "c_healthy = df.loc[df['Outcome'] == 0, 'N2'].value_counts().reindex([0,1], fill_value=0)\n",
        "\n",
        "# --- 4) Hàm hiện % đẹp\n",
        "def autopct_fmt(values):\n",
        "    def _fmt(pct):\n",
        "        return f\"{pct:.1f}%\"   # 1 chữ số thập phân: 19.0%, 48.2%, …\n",
        "    return _fmt\n",
        "\n",
        "# --- 5) Vẽ hai donut chart\n",
        "colors = ['#c7c7c7', '#69d1c5']   # xám cho N2=0, xanh ngọc cho N2=1\n",
        "labels = ['0', '1']\n",
        "\n",
        "fig, axes = plt.subplots(1, 2, figsize=(10, 6))\n",
        "\n",
        "# Donut trái: Diabetic\n",
        "axes[0].pie(\n",
        "    c_diab.values, startangle=90, colors=colors,\n",
        "    wedgeprops=dict(width=0.35, edgecolor='white'),\n",
        "    autopct=autopct_fmt(c_diab.values), pctdistance=0.85\n",
        ")\n",
        "axes[0].text(0, -1.25, f\"Diabetic : {total_diab}\", ha='center', va='center', fontsize=11)\n",
        "\n",
        "# Donut phải: Healthy\n",
        "axes[1].pie(\n",
        "    c_healthy.values, startangle=90, colors=colors,\n",
        "    wedgeprops=dict(width=0.35, edgecolor='white'),\n",
        "    autopct=autopct_fmt(c_healthy.values), pctdistance=0.85\n",
        ")\n",
        "axes[1].text(0, -1.25, f\"Healthy : {total_healthy}\", ha='center', va='center', fontsize=11)\n",
        "\n",
        "# Tiêu đề 2 dòng như hình mẫu\n",
        "fig.suptitle('N2 distribution by target\\nBMI <= 30', fontsize=14, y=0.98)\n",
        "\n",
        "# Legend (0 và 1) bên phải\n",
        "fig.legend(labels, loc='center right', bbox_to_anchor=(1.04, 0.55), frameon=False)\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.0, 0.92, 0.92])\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 603
        },
        "id": "TNsXpsU5Bk9i",
        "outputId": "bbaa697f-f891-4f28-fe0f-d4756aa9ade0"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 0) Thư viện\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.express as px\n",
        "\n",
        "# --- 1) Đọc dữ liệu\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "\n",
        "# --- 2) Làm sạch cơ bản\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "data[cols_fix] = data[cols_fix].replace(0, np.nan)\n",
        "\n",
        "# --- 3) Tạo nhãn Outcome để hiển thị legend đẹp\n",
        "data['Outcome_label'] = data['Outcome'].map({1:'diabetic', 0:'healthy'})\n",
        "\n",
        "# --- 4) Vẽ biểu đồ scatter (Pregnancies vs Age)\n",
        "fig = px.scatter(\n",
        "    data,\n",
        "    x='Pregnancies',\n",
        "    y='Age',\n",
        "    color='Outcome_label',\n",
        "    color_discrete_map={'diabetic':'#FFD700', 'healthy':'#7EC0EE'},\n",
        "    opacity=0.8,\n",
        "    labels={'Pregnancies':'Pregnancies', 'Age':'Age', 'Outcome_label':''},\n",
        "    title='Pregnancies vs Age'\n",
        ")\n",
        "\n",
        "fig.update_traces(marker=dict(size=6, line=dict(width=0)))  # điểm nhỏ gọn\n",
        "fig.update_layout(\n",
        "    legend=dict(title=None),\n",
        "    plot_bgcolor='white',\n",
        "    xaxis=dict(showgrid=True, gridcolor='lightgray'),\n",
        "    yaxis=dict(showgrid=True, gridcolor='lightgray')\n",
        ")\n",
        "\n",
        "fig.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "3SXL9e1EBpwF",
        "outputId": "ed259f2f-956c-420f-e4f3-af14d0a679f4"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"a973f9c1-8893-45c1-97e8-ecfd80d53eda\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"a973f9c1-8893-45c1-97e8-ecfd80d53eda\")) {                    Plotly.newPlot(                        \"a973f9c1-8893-45c1-97e8-ecfd80d53eda\",                        [{\"hovertemplate\":\"=diabetic\\u003cbr\\u003ePregnancies=%{x}\\u003cbr\\u003eAge=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"diabetic\",\"marker\":{\"color\":\"#FFD700\",\"opacity\":0.8,\"symbol\":\"circle\",\"line\":{\"width\":0},\"size\":6},\"mode\":\"markers\",\"name\":\"diabetic\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[6,8,0,3,2,8,10,1,5,7,0,7,1,7,9,11,10,7,3,9,2,4,9,0,7,8,7,8,7,0,2,13,0,5,15,4,1,1,0,3,8,7,4,5,0,0,1,1,0,4,9,3,10,9,8,7,17,0,6,6,6,8,0,5,7,8,1,8,5,7,11,5,3,4,4,8,5,7,0,9,12,5,5,5,0,2,3,4,6,4,7,0,9,3,6,9,12,1,11,3,4,0,2,10,7,0,7,2,1,0,2,1,2,14,0,2,5,10,0,2,2,7,3,6,3,0,13,1,2,1,5,9,7,5,9,1,13,1,5,4,6,1,3,12,4,5,8,5,5,4,0,3,4,5,5,4,8,1,0,3,4,3,8,4,1,1,0,0,8,4,0,0,2,14,10,8,2,3,0,0,4,7,6,0,12,3,9,9,4,3,8,3,10,8,5,6,0,0,2,2,0,8,8,3,11,3,0,1,7,4,1,3,7,11,9,0,7,13,7,6,1,0,11,2,3,1,8,9,6,4,10,6,9,3,0,4,1,13,7,7,3,6,1,10,9,2,10,7,3,5,1,3,8,2,1,11,9,1,3,6,4,0,8,1,0,6,9,1],\"xaxis\":\"x\",\"y\":[50,32,33,26,53,54,34,59,51,32,31,31,32,41,29,51,41,43,28,46,27,56,54,25,31,58,41,39,42,38,28,42,26,37,43,60,31,33,24,24,46,39,61,38,25,23,26,40,62,33,33,30,42,42,43,36,47,32,41,36,29,36,26,37,41,60,33,31,25,36,40,29,23,26,29,57,52,41,24,36,38,25,32,41,21,66,24,22,46,26,51,23,32,22,33,49,44,21,51,27,35,25,28,38,29,28,47,52,29,25,31,24,29,46,30,25,28,47,25,30,27,43,29,59,25,36,43,30,23,41,44,33,41,37,49,28,44,29,29,67,29,45,25,58,32,35,45,58,27,31,22,25,31,35,41,46,39,28,21,22,37,28,36,31,38,43,29,41,33,30,25,22,23,38,51,38,29,35,31,24,45,55,41,35,46,28,53,45,23,32,43,27,56,37,53,54,28,33,21,62,21,52,41,52,45,44,22,38,54,36,22,36,40,50,50,24,34,38,32,50,33,22,42,25,27,22,43,40,40,70,40,31,53,25,26,27,46,44,43,43,31,49,52,30,45,23,38,34,31,52,42,34,22,24,42,48,45,27,36,50,22,26,45,37,52,66,43,47],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"=healthy\\u003cbr\\u003ePregnancies=%{x}\\u003cbr\\u003eAge=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"healthy\",\"marker\":{\"color\":\"#7EC0EE\",\"opacity\":0.8,\"symbol\":\"circle\",\"line\":{\"width\":0},\"size\":6},\"mode\":\"markers\",\"name\":\"healthy\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[1,1,5,10,4,10,1,3,8,1,13,5,5,3,6,10,4,11,3,7,7,7,1,2,7,1,1,5,7,1,0,0,0,2,5,2,5,2,1,4,5,4,1,1,7,5,2,3,2,7,0,2,13,2,1,1,4,7,2,6,2,1,6,1,0,1,2,1,1,4,3,1,4,5,4,4,6,2,5,3,1,8,2,2,0,0,0,5,3,5,2,4,0,9,2,5,2,1,4,1,2,1,2,4,7,0,2,3,4,4,3,2,1,2,6,5,6,0,1,5,4,3,9,8,1,0,1,0,2,6,5,1,2,0,7,6,7,7,1,1,0,4,0,1,4,3,0,1,4,2,10,0,9,1,9,2,2,0,3,2,1,3,4,3,5,2,0,2,3,1,13,2,0,5,2,10,7,7,5,4,5,0,0,6,0,8,5,3,2,0,6,0,3,2,3,3,4,2,1,10,6,8,2,12,1,0,0,1,1,1,5,8,8,1,3,3,4,4,3,1,3,12,5,5,4,5,0,3,0,0,2,2,0,1,0,1,0,1,1,1,1,3,1,1,4,2,3,3,6,9,2,0,6,1,1,1,1,1,1,2,0,2,0,0,2,3,1,2,1,12,5,1,6,2,4,1,0,0,1,0,2,2,1,5,9,9,1,8,5,10,0,0,0,6,1,0,0,7,4,0,7,8,4,0,4,0,1,0,4,8,2,2,4,3,6,5,2,6,2,3,7,3,10,1,2,8,0,9,2,3,7,13,6,2,3,6,3,3,1,3,0,0,2,0,1,6,1,0,0,0,4,1,4,1,4,1,3,6,1,1,7,1,8,11,11,1,6,0,2,1,6,4,3,2,3,2,1,1,6,10,6,12,8,1,6,0,2,2,6,0,1,1,1,6,1,1,1,0,1,3,6,3,6,2,2,2,6,0,2,4,0,0,5,4,0,2,1,10,5,2,1,0,4,4,3,2,0,1,1,5,2,1,2,1,11,10,1,6,9,6,1,10,3,8,0,2,2,0,5,2,3,1,1,8,2,2,0,4,4,2,2,4,6,2,3,5,0,3,10,1,4,1,5,1,4,1,0,2,2,2,2,4,0,8,2,3,1,13,12,1,1,3,7,1,2,9,10,2,5,1],\"xaxis\":\"x\",\"y\":[31,21,30,29,30,57,33,27,50,22,57,38,60,22,28,45,33,35,26,37,48,40,29,22,24,22,26,30,42,21,31,44,22,21,36,24,32,54,25,27,26,23,22,22,41,27,24,22,22,36,22,27,45,26,24,21,34,42,21,40,24,22,23,22,21,24,27,21,27,37,25,23,25,25,22,21,24,23,69,30,23,39,26,31,21,22,29,28,55,38,22,23,21,41,34,65,22,24,37,23,21,23,22,36,45,27,21,22,34,29,29,25,23,33,42,47,32,23,21,27,40,21,40,42,21,21,28,32,27,55,27,21,25,24,60,32,37,61,26,22,26,31,24,22,29,23,27,21,22,29,41,23,34,23,42,27,24,25,30,25,24,34,24,63,43,24,21,21,40,21,52,25,23,57,22,39,37,51,34,26,33,21,65,28,24,58,35,37,29,21,41,22,25,26,30,28,31,21,24,37,37,46,25,44,22,26,44,22,36,22,33,57,49,22,23,26,29,30,46,24,21,48,63,65,30,30,21,22,21,21,25,28,22,22,35,24,22,21,25,25,24,28,42,21,37,25,39,25,55,38,26,25,28,25,22,21,22,27,26,21,21,21,25,26,23,38,22,29,36,41,28,21,31,22,24,28,26,26,23,25,72,24,62,24,81,48,26,39,37,34,21,22,25,27,28,22,22,50,24,59,31,39,63,29,28,23,21,58,28,67,24,42,33,22,66,30,25,39,21,28,41,40,38,21,21,64,21,58,22,24,51,41,60,25,26,26,24,21,21,24,22,31,22,24,29,31,24,46,67,23,25,29,28,50,37,21,25,66,23,28,37,30,58,42,35,24,32,27,22,21,46,37,39,21,22,22,23,25,35,36,27,62,42,22,29,25,24,25,34,46,21,26,24,28,30,21,25,27,23,24,26,27,30,23,28,28,45,21,21,29,21,21,45,21,24,23,22,31,48,23,28,27,24,31,27,30,23,23,27,28,27,22,22,41,51,54,24,43,45,49,21,47,22,68,25,23,22,22,69,25,22,29,23,34,23,25,22,28,26,26,41,27,28,22,24,40,21,32,56,24,34,21,42,45,38,25,22,22,22,22,53,28,21,42,21,26,22,39,46,32,28,25,39,26,22,33,63,27,30,23],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Pregnancies\"},\"showgrid\":true,\"gridcolor\":\"lightgray\"},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Age\"},\"showgrid\":true,\"gridcolor\":\"lightgray\"},\"legend\":{\"title\":{},\"tracegroupgap\":0},\"title\":{\"text\":\"Pregnancies vs Age\"},\"plot_bgcolor\":\"white\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('a973f9c1-8893-45c1-97e8-ecfd80d53eda');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "palette ={0 : 'lightblue', 1 : 'gold'}\n",
        "edgecolor = 'black'\n",
        "\n",
        "fig = plt.figure(figsize=(12,8))\n",
        "\n",
        "ax1 = sns.scatterplot(x = data['Pregnancies'], y = data['Age'], hue = \"Outcome\",\n",
        "                    data = data, palette = palette, edgecolor=edgecolor)\n",
        "\n",
        "plt.annotate('N3', size=25, color='black', xy=(6, 25), xytext=(10, 25),\n",
        "            arrowprops=dict(facecolor='black', shrink=0.05),\n",
        "            )\n",
        "plt.plot([0, 6], [30, 30], linewidth=2, color = 'red')\n",
        "plt.plot([6, 6], [20, 30], linewidth=2, color = 'red')\n",
        "plt.plot([0, 6], [20, 20], linewidth=2, color = 'red')\n",
        "plt.plot([0, 0], [20, 30], linewidth=2, color = 'red')\n",
        "plt.title('Pregnancies vs Age')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "YpeeMMddB--J",
        "outputId": "6f11290c-44f1-46e7-ab09-5f2ef816682a"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 0) Thư viện\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# --- 1) Đọc dữ liệu\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "\n",
        "# Thay 0 bằng NaN cho các biến đo lường\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "data[cols_fix] = data[cols_fix].replace(0, np.nan)\n",
        "\n",
        "# --- 2) Tạo cờ N3 = 1 nếu Age ≤ 30 và Pregnancies ≤ 6\n",
        "df = data.dropna(subset=['Age','Pregnancies']).copy()\n",
        "df['N3'] = ((df['Age'] <= 30) & (df['Pregnancies'] <= 6)).astype(int)\n",
        "\n",
        "# Tạo nhãn Outcome\n",
        "df['Outcome_label'] = df['Outcome'].map({1:'diabetic', 0:'healthy'})\n",
        "df['Outcome_label'] = pd.Categorical(df['Outcome_label'],\n",
        "                                     categories=['diabetic','healthy'],\n",
        "                                     ordered=True)\n",
        "\n",
        "# --- 3) Tạo bảng đếm cho bar chart\n",
        "count_df = (\n",
        "    df.groupby(['N3','Outcome_label'])\n",
        "      .size().reset_index(name='Count')\n",
        ")\n",
        "\n",
        "# Bảo đảm đủ tổ hợp (0/1 × 2 nhóm)\n",
        "full = pd.MultiIndex.from_product([[0,1], ['diabetic','healthy']],\n",
        "                                  names=['N3','Outcome_label'])\n",
        "count_df = (count_df.set_index(['N3','Outcome_label'])\n",
        "                    .reindex(full, fill_value=0)\n",
        "                    .reset_index())\n",
        "\n",
        "# --- 4) Tính % diabetic theo từng nhóm N3\n",
        "pct_df = (count_df.pivot(index='N3', columns='Outcome_label', values='Count')\n",
        "                   .fillna(0).astype(int))\n",
        "pct_df['pct_diabetic'] = (pct_df['diabetic'] /\n",
        "                          (pct_df['diabetic'] + pct_df['healthy']).replace(0, np.nan)) * 100\n",
        "pct_df = pct_df.reset_index()\n",
        "\n",
        "# --- 5) Vẽ biểu đồ\n",
        "fig, ax1 = plt.subplots(figsize=(8.5, 5.2))\n",
        "\n",
        "palette = {'diabetic':'#FFD700', 'healthy':'#7EC0EE'}\n",
        "\n",
        "bars = sns.barplot(\n",
        "    data=count_df, x='N3', y='Count',\n",
        "    hue='Outcome_label', hue_order=['diabetic','healthy'],\n",
        "    palette=palette, ax=ax1\n",
        ")\n",
        "\n",
        "# Số trên đầu cột\n",
        "for p in bars.patches:\n",
        "    ax1.text(p.get_x()+p.get_width()/2, p.get_height()+5,\n",
        "             f\"{int(p.get_height())}\", ha='center', va='bottom', fontsize=11)\n",
        "\n",
        "ax1.set_xlabel('')\n",
        "ax1.set_ylabel('Count')\n",
        "ax1.set_xticklabels([0, 1])\n",
        "\n",
        "# Trục phụ: % diabetic\n",
        "ax2 = ax1.twinx()\n",
        "line = ax2.plot(pct_df['N3'], pct_df['pct_diabetic'],\n",
        "                color='gray', marker='o', linewidth=2, label='% diabetic')\n",
        "ax2.set_ylabel('% diabetic')\n",
        "\n",
        "# Gộp legend: cột + line\n",
        "handles1, labels1 = ax1.get_legend_handles_labels()\n",
        "ax1.legend_.remove()\n",
        "handles = handles1 + line\n",
        "labels = labels1 + ['% diabetic']\n",
        "ax1.legend(handles, labels, loc='upper right', frameon=True)\n",
        "\n",
        "# Tiêu đề (y hệt hình bạn gửi)\n",
        "plt.title('N3 : Age \\u2264 30 and Pregnancies \\u2264 6', fontsize=13)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 665
        },
        "id": "ixtOqdyyCERB",
        "outputId": "be999b77-3077-40b9-fb0a-5568a5cde421"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2585689417.py:26: FutureWarning:\n",
            "\n",
            "The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
            "\n",
            "/tmp/ipython-input-2585689417.py:62: UserWarning:\n",
            "\n",
            "set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 850x520 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 0) Thư viện\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# --- 1) Đọc & làm sạch tối thiểu\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "data[cols_fix] = data[cols_fix].replace(0, np.nan)\n",
        "\n",
        "# Chỉ giữ hàng có Age, Pregnancies để xét N3\n",
        "df = data.dropna(subset=['Age','Pregnancies']).copy()\n",
        "\n",
        "# --- 2) Cờ N3 = 1 nếu (Age ≤ 30) & (Pregnancies ≤ 6), ngược lại 0\n",
        "df['N3'] = ((df['Age'] <= 30) & (df['Pregnancies'] <= 6)).astype(int)\n",
        "\n",
        "# --- 3) Đếm theo target (Outcome)\n",
        "total_diab    = int((df['Outcome'] == 1).sum())\n",
        "total_healthy = int((df['Outcome'] == 0).sum())\n",
        "\n",
        "# Đếm N3=0/1 trong từng nhóm target, đảm bảo thứ tự [0,1]\n",
        "c_diab    = df.loc[df['Outcome'] == 1, 'N3'].value_counts().reindex([0,1], fill_value=0)\n",
        "c_healthy = df.loc[df['Outcome'] == 0, 'N3'].value_counts().reindex([0,1], fill_value=0)\n",
        "\n",
        "# --- 4) Hàm hiển thị phần trăm\n",
        "def autopct_fmt(values):\n",
        "    def _fmt(pct):\n",
        "        return f\"{pct:.1f}%\"\n",
        "    return _fmt\n",
        "\n",
        "# --- 5) Vẽ 2 donut chart\n",
        "colors = ['#c7c7c7', '#69d1c5']   # xám cho 0, xanh ngọc cho 1\n",
        "labels = ['0', '1']\n",
        "\n",
        "fig, axes = plt.subplots(1, 2, figsize=(10, 6))\n",
        "\n",
        "# Donut trái: Diabetic\n",
        "axes[0].pie(\n",
        "    c_diab.values, startangle=90, colors=colors,\n",
        "    wedgeprops=dict(width=0.35, edgecolor='white'),\n",
        "    autopct=autopct_fmt(c_diab.values), pctdistance=0.85\n",
        ")\n",
        "axes[0].text(0, -1.25, f\"Diabetic : {total_diab}\", ha='center', va='center', fontsize=11)\n",
        "\n",
        "# Donut phải: Healthy\n",
        "axes[1].pie(\n",
        "    c_healthy.values, startangle=90, colors=colors,\n",
        "    wedgeprops=dict(width=0.35, edgecolor='white'),\n",
        "    autopct=autopct_fmt(c_healthy.values), pctdistance=0.85\n",
        ")\n",
        "axes[1].text(0, -1.25, f\"Healthy : {total_healthy}\", ha='center', va='center', fontsize=11)\n",
        "\n",
        "# Tiêu đề 2 dòng như hình\n",
        "fig.suptitle('N3 distribution by target\\nAge <= 30 and Pregnancies <= 6', fontsize=14, y=0.98)\n",
        "\n",
        "# Legend “0/1” bên phải\n",
        "fig.legend(labels, loc='center right', bbox_to_anchor=(1.04, 0.55), frameon=False)\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.0, 0.92, 0.92])\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 603
        },
        "id": "9T9hvfHvDC_V",
        "outputId": "e0d7f377-586d-4edf-90e0-c250b1ab0d28"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABA4AAAJKCAYAAACsxwcAAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAw85JREFUeJzs3Xd8G+X9B/DPnba894xXdsiEhCQQMiCMskcZDSOMH6MUCmW2lJKwR5mljJYVNmFvCCsJM0ASMu0M770tW5atec/vD0dqHFuJndg+Wfd5v14uzUk6fSVbuuc+9wxJCCFARERERERERNQLWe0CiIiIiIiIiCh0MTggIiIiIiIioqAYHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiIgmJwQERERERERERBMTggIiLVSJKE+fPnd9t24YUXQpIklJaWDnk9q1atgiRJWLp0abftOTk5yMnJGfJ6/JYuXQpJkrBq1SrVatidmr8jIiIiGnoMDoiIwlRpaSkkSYIkSTj22GN7vc+aNWsgSRIuvPDCbts/++wznHPOORg3bhxiY2NhtVoxbtw4XHLJJdixY8cQVL9//K95z9cT6oIFFtRdqAUoB0rtQIqIiKivGBwQEWnAF198gW+++abP9//000+xZs0aTJkyBRdddBGuuuoqjB49Gi+++CImT57cr33117333ouCggJkZGQM2nMEc+ihh6KgoABXXXXVkD/33lx11VUoKCjAoYceqnYpREREpEF6tQsgIqLBlZOTg/Lyctx888345ZdfIEnSPh/zz3/+E48//niP7V9//TUWLlyIm2++Gb/++utglIu0tDSkpaUNyr73xd+zItQkJiYiMTFR7TKIiIhIo9jjgIgozI0dOxbnn38+1q5dizfffLNPjzGbzb1uP+qooxAXF4fCwsJ+1fDss89i4sSJMJvNGDFiBG666SY4nc5e7xts/Pw777yDefPmITk5GWazGenp6Vi4cCHeeecdAMCyZcuQm5sLAHjxxRcDwzR279q+e1f3ZcuW4eCDD4bVag3Ms7CvIQM2mw2XX345UlNTYTabMW3aNLz++ut9fg171uD/94IFCwAAt99+e7e6/Y/fWxf9jz76CAsWLEBMTAwsFgumTJmChx9+GF6vt9v9dh/GUVhYiNNOOw1xcXGIiIjAwoULsXHjxl5f894oioIHHngAo0ePhtlsRm5uLu644w54PJ7Afb766itIkoQrr7yy130UFRVBluWgw2n85s+fj9tvvx0AsGDBgsB7tHtX/5UrV+Liiy/G2LFjERkZicjISEyfPh3//e9/e92nf46NqqoqXHDBBUhNTYUsy4H32ev14t5778XIkSNhNpsxatQo3HvvvSguLg46JKa+vh5/+ctfMGrUKJhMJiQmJuKMM87Ali1bAvfx/y7KyspQVlbW7XfO4SpERBSK2OOAiEgD7rjjDrzxxhu49dZbcfrpp8NgMOzXfn766Se0tLRgzpw5fX7MnXfeidtuuw0pKSm49NJLYTAYsHz5chQUFPR5H0899RSuvPJKpKWl4bTTTkNCQgJqa2vxyy+/4L333sMZZ5yBqVOn4pprrsFjjz2GKVOm4NRTTw08fs9x5P/85z+xcuVKnHLKKTjmmGOg0+n2WYPb7cbChQvR3t6O888/Hw6HA2+++SYWLVqExsZGXH311X1+PbubP38+SktL8eKLL2LevHndJouMjY3d62MffvhhXH/99YiPj8eiRYsQERGBDz/8ENdffz2+++47vPvuuz16mJSWlmLWrFk46KCDcPHFF6OoqAgffPABFixYgIKCAqSkpPS59muvvRY//PADzjrrLERGRuKjjz7CkiVLsGnTJrz99tsAusKmkSNH4rXXXsODDz4Iq9XabR/PPvsshBC49NJL9/pc/pP01atXY/HixYHf6e7v0f3334/CwkLMmjULp512Gmw2Gz7//HNcfvnl2L59Ox566KEe+21qasLs2bMRHx+Pc845B06nE9HR0QCAiy++GC+//DLy8vLwpz/9CS6XC4888gh++umnXmssKirC/PnzUVlZiWOOOQannnoq6uvr8c4772DFihX4+uuvMXPmTMTGxmLJkiV49NFHA++j356ThRIREYUEQUREYamkpEQAEMcee6wQQogbbrhBABCPP/544D4//fSTACAWL17c6z5WrFghlixZIv7617+KM844Q5hMJpGYmCh+/fXXPtWwc+dOodfrRUZGhqirqwtsb21tFWPHjhUAxLx587o9ZvHixQKAKCkpCWw7+OCDhdFo7LYPv8bGxh6vOdjrWbJkiQAgIiIixKZNm3rcvnLlSgFALFmypNv27OxsAUDMnTtXuFyuwPaKigqRmJgoTCaTqKys3Otr2LOGlStX7vN59/aYwsJCodfrRXJysigvLw9sdzqdYs6cOQKAeOmll3q8NwDEfffd123/t956qwAg7r333l6ff0/+15eUlCQqKioC210ul5g7d64AIN5+++3A9vvvv18AEMuWLeu2H4/HI9LS0kRycrJwu937fN7e3ofdFRcX99jm8XjE0UcfLXQ6nSgrK+t2m//9uOiii4TX6+1221dffSUAiKlTpwqHwxHYXl1dLVJSUnr9OzvssMOETqcTn3/+ebft27dvF1FRUWLSpEndtmdnZ4vs7Ox9vGoiIiL1cagCEZFG3HLLLYiNjcWdd96J9vb2Pj3miy++wO2334777rsP77zzDkaMGIHPP/8c06dP79PjX3vtNXi9Xlx33XVITk4ObI+Ojsatt97ar/oNBkOvPSUSEhL6tR8AuOyyyzBp0qR+P+6ee+6B0WgM/DszMxPXXHMNXC4X3njjjX7v70D439vrr78eI0aMCGw3mUy4//77AXQN39hTbm4ubrzxxm7bLrnkEgDo97wV11xzDTIzMwP/NhqNuPvuu3s890UXXQSj0Yhnn3222+M/+eQT1NTUYPHixfvdC2Z3/qEqu9Pr9bjiiivg8/mwcuXKHrcbjUY88MADPXqdvPLKKwCA2267rVsvibS0NFxzzTU99vPbb7/hxx9/xOLFi3sMuxgzZgwuvfRSbN68uduQBSIiouGCwQERkUbExcXhr3/9K+rr6/Hggw/26TEPPvgghBCw2+34+eefMXbsWBx++OF47bXX+vR4/7j5I444osdtvW0L5pxzzoHD4cDEiRNx44034tNPP0VbW1ufH7+n/VmdQK/XY/bs2T22+1/Hb7/9tt/17A//8/XWtX327Nkwm83YsGFDj9umTp0KWe5++Pef/Ntstn7V0NvvcPbs2dDr9d3ej6SkJJx++un4/vvvsW3btsB2f5Dwf//3f/163mDsdjuWLFmCKVOmIDIyMjBvwBlnnAEAqK6u7vGY3NzcXiee9P/t9jYs5/DDD++xbc2aNQCAuro6LF26tMeP/3Xv/vqJiIiGC85xQESkIX/+85/x73//Gw899FDQyep6ExkZiUMPPRTvv/8+pk+fjssuuwxHH300kpKS9vq41tZWAOjW28CvP2Ppb7jhBiQkJOCpp57CQw89hAcffBB6vR4nnHACHnnkkV6vNO9Nf57bLzExsccJ9+778r/WoeIPTnp7LZIkISUlBVVVVT1u84/f351e39Uc8Pl8/aqht+fW6XRISEjo8X5cfvnleOONN/Dss8/iwQcfRHV1NT777DPMmzcPY8aM6dfz9sbtdmP+/PlYv349pk2bhvPPPx8JCQnQ6/WBOSRcLlefXgPQ9f7KstxrqNDbY5qbmwF09aL45JNPgtbpcDj6+pKIiIhCBnscEBFpiMViwe2334729vbADPX9odfrsWDBAjgcDqxdu3af94+JiQHQNdP8nurq6vr8vJIk4eKLL8avv/6KhoYGvPfeezj99NPxwQcf4MQTT+z3CW9flqTcU2NjIxRF6bHd/zr8rxVAIGDYc2UDYOACBn8A0Nv7KIRAXV1dryHBQOrtuX0+H5qamrq9H0BXz4hx48bhpZdegtvtxgsvvACfz7fPSRH76oMPPsD69etxySWXYP369Xjqqadw1113YenSpTjuuOOCPi7Y30J0dDQURUFjY2OP23p73f73+vHHH4cQIujP4sWL9/MVEhERqYfBARGRxixevBgHHXQQnnnmmX4vqwj8r7t3X8akT5kyBQDw3Xff9bitt219kZCQgFNPPRXLly/HkUceifz8/MDr8I9T72+Q0Bder7fX2fT9r2PatGmBbXFxcQDQ6xX/3oY07E/d/ufrbYnGn3/+GU6nE1OnTu3z/vZHb7/Dn376CV6vt9v74XfZZZehoaEB77//Pp5//nnExcUFhhH0xd7ep6KiIgDAKaec0qc698X/t/vDDz/0uO3HH3/ssW3mzJkAEHTFhd7odLpB+VslIiIaaAwOiIg0RqfT4Z577oHH4wm6Znyw3gQrVqzAe++9h9jY2F7H++9p0aJF0Ol0ePjhh7v1Omhra8Ndd93V55pXrVoFIUS3bR6PJ9A93Gw2A+g6YZckCRUVFX3ed3/ccsstcLvdgX9XVlbiscceg8lkwjnnnBPYPmPGDAA9Jyd8++23sXr16h77jY+PB4B+1b1o0SLo9Xo8/PDD3cbuu91u3HzzzQD+t4ThYHnsscdQWVnZ7bn//ve/B33uxYsXw2w24y9/+QuKi4tx/vnnB353fbG39yk7OxsA8P3333fbvnr1ajzzzDN9fg6/c889F0DXUqadnZ2B7bW1tXjsscd63P/QQw/FzJkz8frrr2P58uU9blcUpcfvPj4+Ho2NjXA6nf2uj4iIaChxjgMiIg06+eSTMWfOnB4nWX4zZszAxIkTMXnyZGRmZsLhcGDTpk347rvvYDAY8PzzzyMiImKfzzNq1CjcdtttWLJkCSZPnoyzzjoLer0e77zzDiZPnozt27f3qd5TTz0V0dHRmDVrFrKzs+HxePDll18iPz8fv//97wMnjZGRkZgxYwa+/fZbnH/++Rg9ejRkWcb5558fuM/+SktLg8PhwOTJk3HSSSfB4XDgzTffRFNTE/71r38hIyMjcN9TTjkFI0eOxLJly1BRUYFp06ahoKAA33zzDY4//nh8+umn3fY9btw4pKen44033oDJZEJmZiYkScLVV1/do8u/38iRI3H//ffj+uuvD7y3ERER+Oijj7B9+3accsopOO+88w7oNe/LrFmzMGXKFJx99tndnvv000/vtSdBfHw8zjzzTLz88ssA0O9hCgsWLIAkSbjllluwdetWxMTEIDY2FldddRVOOukk5OTk4IEHHsCWLVswceJEbN++HR9//DFOO+00vP322/16roULF2LRokV47bXXMGnSJJx66qlwuVx48803MXPmTHz00Uc95rx4/fXXsWDBApxzzjl49NFHcfDBB8NisaC8vBw//fQTGhoauoUERx55JNauXYvf/e53OOKII2A0GjF37lzMnTu3X7USERENOrXWgSQiosFVUlIiAIhjjz2219t/+OGHwDr2e65Hf88994ijjz5aZGRkCKPRKMxmsxgzZoy47LLLRH5+fr9reeaZZ8SECROE0WgUmZmZ4oYbbhAdHR0CgJg3b163+y5evFgAECUlJYFtTz75pDj55JNFdna2MJvNIiEhQRx66KHiqaeeEm63u9vjt2/fLo4//ngRGxsrJEkSAMTKlSuFEEIsWbKk27/3tHLlSgFALFmypNv27OxskZ2dLZqbm8Vll10mUlJShMlkElOmTBGvvfZar/sqKSkRp556qoiKihIRERHiqKOOEr/++mvQGtasWSPmzZsnoqKiAr8X/3uwt7o/+OCDwONMJpOYNGmSeOihh4TH4+lRT2+/a7/efhfB+H9HRUVF4r777hOjRo0SRqNRZGdni6VLlwqXyxX0sV999ZUAIGbNmtWn59rTsmXLxKRJk4TJZBIARHZ2duC24uJiccYZZ4ikpCRhtVrFjBkzxBtvvBH097qv1+zxeMSdd94pcnNzhdFoFHl5eeKee+4RP//8swAgrrnmmh6PaW5uFrfeequYOHGisFgsIjIyUowePVosWrRIvPvuu93ua7fbxaWXXirS0tKETqfrtUYiIqJQIAmxR99PIiIiokHy4IMP4sYbb8Rzzz2Hiy++WO1y9suzzz6LSy+9FE8++ST++Mc/ql0OERHRoGNwQEREREPC6XRi3LhxaGtrQ2VlJaxWq9ol7VVtbS1SUlK6rbxQVVWFww8/HJWVlSgpKcGIESNUrJCIiGhocI4DIiIiGlTff/89Vq9ejRUrVqCsrAz33ntvyIcGAHDffffhk08+wRFHHIHk5GSUl5fj448/ht1ux9KlSxkaEBGRZjA4ICIiokH11Vdf4fbbb0diYiL+8pe/4IYbblC7pD457rjjkJ+fj08++QQtLS0wm82YPHkyrrzySixatEjt8oiIiIYMhyoQERERERERUVDyvu9CRERERERERFrF4ICIiIiIiIiIgmJwQERENAQkScL8+fPVLoP2kJOTg5ycHLXLICIiCmkMDoiI+uniiy+GJElISEiAy+VSu5xh57bbbsPChQsxYsQIWCwWJCYmYvr06XjkkUfQ0dHR62NcLhfuuOMOjB49GmazGenp6bjssstQX18/xNUPjWXLlkGSpG4/FosF48aNw3XXXYfGxka1SyQN2rhxIxYtWoSMjAyYTCakp6fjd7/7HVauXKl2aURENMg4OSIRUT/Y7XakpaWho6MDQgi88cYbOPvss9Uua1iJj4/H6NGjMXHiRCQnJ8Nut2PVqlXYunUrpkyZgh9//LHbUn2KouD444/HihUrMGvWLMybNw87d+7Ee++9h9zcXKxZswZJSUkqvqK+kSQJ8+bNw6pVq/Z532XLluGiiy7CUUcdhTlz5gAAGhoasGLFChQVFSE7Oxvr1q1DQkLCIFcd/oqKigAAI0eOVLmS0PbSSy/h4osvRkxMDE488URkZGSgsbERa9euxRlnnIG///3vapdIRESDiMsxEhH1w/Lly+FwOHDdddfh0UcfxXPPPTfsg4OKigrIsoyMjIwheb7q6mqYzeYe288//3y88soreOGFF/CnP/0psP3FF1/EihUr8Ic//AGvvvoqJEkCADz99NP44x//iFtvvRX/+c9/hqT2obZw4UL89a9/Dfzb4/Hg2GOPxcqVK/H4449j6dKl6hUXJoZjYNDQ0IDW1laMGjVqSJ5v3bp1uOSSSzBjxgx8+umniIuL63a71+sdkjqIiEg9HKpARNQPzz33HPR6PW666SYsWLAAX3/9NcrKyoLef/Xq1Zg7dy4iIiKQkJCAs88+GxUVFZg/f37gBHh3Qgg8//zzOPzwwxEdHQ2r1Yrp06fj+eefH9DXYbfbsWzZMhx55JHIzs7Gr7/+OqD735veQgMAOPPMMwEAhYWF3bY/88wzAIB7772323t2+eWXIy8vD6+++io6Ozv3+bxutxuPP/44jj32WIwYMQImkwnJyck4/fTT8dtvv/W4v3+4wLJly/DFF1/gsMMOg9VqRUJCAhYvXoympqZen+fZZ5/FxIkTYTabMWLECNx0001wOp37rK8vDAYDLr/8cgAI/M5WrVoFSZKwdOlS/PjjjzjmmGMQGxvb7b3q799VY2MjLrvsMiQnJ8NqtWLGjBl47733ur0nfqWlpZAkCRdeeCEKCwtx2mmnIS4uDhEREVi4cCE2btzYY/8rV67ExRdfjLFjxyIyMhKRkZGYPn06/vvf//Zaj39+iLq6OixevBiJiYmwWCyYNWtW0B4cdrsdt99+OyZPngyr1YqYmBhMmzYN//jHP+DxeAL3CzbHQX/eM6fTiYceeghTpkxBTEwMIiIikJOTg7POOqvX178/XC4X3nrrLZx88snIyMjAxx9/PCD77Yu///3v8Pl8ePnll3uEBgCg1/M6FBFRuOM3PRFRH+Xn52PNmjU4/vjjkZKSggsuuABff/01XnjhhV6v/H7xxRc44YQToNPpcPbZZyM9PR0rV67EnDlzem18CyFw7rnn4vXXX8fo0aOxaNEiGI1GfPnll7jkkkuQn5+PBx98cL/r9/l8+PLLL/Hyyy/j/fffR0dHB6Kjo7F48WIcfPDB+73fgfLJJ58AACZOnBjY5nQ68fPPP2Ps2LHIzs7udn9JknD00UfjP//5D9auXYsjjjhir/tvbm7GtddeiyOOOALHH3884uLiUFxcjA8//BCfffYZvv32W8yYMaPH4z788EN88sknOOmkk3DYYYfh22+/xUsvvYSioiJ8//333e5755134rbbbkNKSgouvfRSGAwGLF++HAUFBfv7tgS1Z/D0448/4p577sGCBQtw2WWXoby8HED//67a29sxb9485Ofn47DDDsPcuXNRWVmJc845B8cee2zQekpLSzFr1iwcdNBBuPjii1FUVIQPPvgACxYsQEFBAVJSUgL3vf/++1FYWIhZs2bhtNNOg81mw+eff47LL78c27dvx0MPPdRj/zabDXPmzEFMTAzOP/981NfXY/ny5Tj22GOxbt26bn839fX1mDdvHrZt24apU6fij3/8IxRFwbZt23D//ffj+uuvR2xsbNDX0t/3bPHixXjzzTcxefJkXHTRRTCZTKioqMDKlSvx66+/YsqUKcF/kfvw/fff46WXXsJbb70Fm80Gs9mMU045BUcdddR+77M/bDYbvvjiC0ybNg2jRo3C6tWr8csvv0Cv12PmzJk47LDDhqQOIiJSmSAioj657rrrBADx+uuvCyGEsNvtIiIiQmRlZQmfz9ftvl6vV2RnZwtJksR3333X7bYLLrhAABB7fgX/97//FQDERRddJNxud2C7y+USJ510kgAg1q5d2++6N2zYIK677jqRmpoqAAiDwSBOOOEE8cYbb4iOjo5eH7Ny5UqxZMmSPv+88MIL/a7r/vvvF0uWLBHXXHONmD59ugAgjjnmmG6vfcuWLQKAOPHEE3vdx4MPPigAiOeee26fz+d0OkVlZWWP7Vu2bBGRkZFi4cKF3ba/8MILAoDQ6/Xi+++/D2z3er1i/vz5AoD46aefAtt37twp9Hq9yMjIEHV1dYHtra2tYuzYsQKAmDdv3j7r3P2577333m7bPR6POPLIIwUAcfvttwshun5X/r+n559/vse++vt3deuttwoA4rLLLuu2n6+++irwPLv/vktKSgLb77vvvm6P8e9rz9dRXFzco06PxyOOPvpoodPpRFlZWbfb/Pu/8soru33Wnn32WQFAXH755d3uf8YZZwgA4pZbbunxPLW1tcLj8QT+nZ2dLbKzs7vdpz/vmc1mE5IkiUMOOUR4vd5u+/F6vaKlpaVHDfuyc+dOcdttt4m8vDwBQMiyLObPny+effZZYbPZen3Mb7/91q/P7COPPNKnWr7++msBQJxyyinixBNPDPwu/D9HH3100JqIiCh8MDggIuoDt9stkpKSRHR0tOjs7AxsP++88wQAsWLFim73X7VqlQAgTj755B77Ki8vFzqdrkdwMHnyZBEREdHryfymTZsEAHH99df3qd6qqirxz3/+U0yaNCnQwJ85c6Z4/PHHRUNDwz4fv2TJkh4nCHv76esJ8e4SEhK67eO8884Tdru9231++OEHAUCce+65ve7Df4L38MMP9/v5d3fSSScJo9HY7STRf/J+wQUX9Li//7Z//etfgW233367ACAeeuihHvd/+eWX9ys4OOqoowIneldddZUYPXq0ACByc3NFU1OTEOJ/wcHBBx/c6776+3eVk5MjjEajqK2t7XH/Y445JmhwkJub2yNA8992+umn9+l1v/POOwKAWLZsWbftAERERESPvw+PxyP0en23115TUyMkSRIjR47s9vsMprfgoD/vWWtrqwAgDj/8cKEoSp9eZ2+amprEU089JWbPnh34TEycOFHcd999oqKiYp+P9//N9PVnz9cczOuvvy4ACJ1OJ1JSUsT7778vWltbRUFBgTj55JMFAHHWWWft9+smIqLhgUMViIj64IMPPkBDQwMuueSSbmP0L7jgArzyyit47rnncMwxxwS2+8c1+2fE392IESOQlZWFkpKSwLaOjg5s3rwZ6enpuP/++3s8xj8me9u2bX2q9/DDD0dpaSmSk5OxZMkSnHfeef2aSG3p0qWDPvGef0nB2tpafPPNN7j55psxc+ZMrFixApmZmYPynBs2bMADDzyA77//HrW1td3GuvtrSktL67btkEMO6bEff302my2wzf87723IxL6GUQTz9ddf4+uvvwYAmEwm5OTk4LrrrsPf/vY3xMfHd7tvb8Ms+vt31dbWhtLSUkyYMKHb0AK/ww8/HF988UWvtU6dOhWy3H3qpN7eJ6Br/oEHH3wQ77//PoqKiuBwOLrdXl1d3WP/Y8aMQWRkZLdter0eKSkp3fa/du1aCCGwYMECGAyGXmvdm/6+Z9HR0Tj++OPx6aef4uCDD8aZZ56J+fPnY8aMGf16/jPOOAOrVq1CZGQkrr/+epx33nmYOnVqnx9/4YUX4sILL+zz/ftKURQAXUOdnn76aZxyyikAul73m2++iTFjxuCtt97Cgw8+iBEjRgz48xMRUWhgcEBE1AfPPfccgK6gYHdHHXUUMjIy8MEHH6C5uTlwMtfW1gYASE5O7nV/KSkp3YKDlpYWCCFQVVWF22+/PWgde55gBTNx4kSUlpaivr4en3/+ORITE3H22WeH5LKFqampWLRoEUaPHo1DDz0U119/PZYvXw4AiImJAQC0trb2+lj/++y/3978+OOPOPLIIwEAxxxzDEaPHo3IyEhIkoT3338fGzduhMvl6vG46OjoHtv8k8H5fL7ANn+Nvf3OezsJ74t7772326oKe9Pbc/T376ovf7fB9PV9crvdmD9/PtavX49p06bh/PPPR0JCAvR6PUpLS/Hiiy/2+ffgf47efg/7u0rI/nwW33rrLdxzzz147bXXAssSRkdH46KLLsI999zTbXnRYCZMmIBvv/0W7e3tWLFiBRITExEfH4+srKz9eh0Dxf/Z0ul0OOGEE7rdZjKZcMwxx+DZZ5/FunXrGBwQEYUxBgdERPtQUVERuMo6b968oPd75ZVX8Oc//xnA/05y6uvre71vXV1dt3/773/IIYdg7dq1B1zzRx99hJ07d+Kll17CK6+8gquvvhp/+ctfcPTRR+O8887DKaecgoiIiKCPX7VqVdDZ6nuTk5NzwFc7Z8yYgbi4uG7Pm5eXB1mWsXPnzl4f498+evTofe7/7rvvhsvlwnfffdejJ8iaNWsOePZ7/wlWfX19j4kc9/x9D4beVuno799Vf/9u98cHH3yA9evX45JLLsGzzz7b7bY33ngDL7744gHt3z/pYVVV1X49fn8+i1arFXfddRfuuusulJSUYOXKlXj66afx2GOPobOzs0/LhT7xxBO45ZZb8Morr+Dll1/G3/72N9xyyy044ogjcO655+LMM8/sdVJVvw0bNuD999/vU71A1/t07bXX7vN+Y8eOBdD1GnvrQeF/v/uysgkREQ1fDA6IiPZh2bJlUBQFc+bMCTSid+f1evHiiy/iueeeCwQH/lnUf/jhB9x4443d7l9ZWRmY8d4vKioK48ePR0FBAWw2215nfO+r0aNH484778Qdd9yB7777Di+//DLeeustfPbZZ4iIiMCpp56Kc889F0cffXSP5dRWrVq116ute5o3b94BBwft7e1obW3tNlTAYrHg0EMPxZo1a1BWVtbthFwIgS+//BIRERGYPn36PvdfVFSE+Pj4HqFBR0cH1q9ff0C1A12/83fffRffffddj2ED33333QHvf3/09+8qOjoaOTk5KCwsRH19fY+eBz/++OMB11RUVAQAgS7vuxuI92n69OmQZRkrV66Ex+Pp93CFA/0s5ubmIjc3F3/4wx+QnJyMDz/8sE/BAdDVS+Lmm2/GzTffjPXr1+Pll1/G66+/jssvvxxXX301jj/+eJx77rk48cQTeyxrumHDhn59ZrOzs/sUHIwcORJZWVkoLy9HZWVlj2FE+fn5ANDrkpZERBQ+5H3fhYhIu4QQeOGFFyBJEl588UU8++yzPX6WLVuG2bNnY9OmTYErlHPmzEFWVhY++ugj/PTTT932+Y9//KNb12q/P//5z+jo6MCll17a65CEkpISlJaW9vs1SJKEuXPn4plnnkFtbS2WL1+O+fPnY/ny5Tj++OORkZGBn3/+udtjli5dCtE1gW6ffvraO6G4uBjNzc09tns8Hlx77bVQFAXHH398t9suu+wyAMDf/vY3CCEC2//zn/+guLgY5557LiwWyz6fOzs7Gy0tLdi6dWtgm8/nww033ICGhoY+1b83ixYtgk6nw8MPP9ztin1bWxvuuuuuA97//urv39W5554Lt9uNJUuWdLvfqlWrsGLFigOuxx/+7LmU5erVq/HMM88c8P5TUlJwxhlnoKioqNcT6fr6eni93r3uoz/vWUNDA7Zs2dLjPi0tLXC5XD1O8Pvq4IMPxiOPPILKykp8/PHHOO2007BixQqceeaZSE1N7dG74MILL+zXZ7av3yWSJOGKK64AANxyyy2BOQ+Art/ZZ599hpycnF7n2CAiovDBHgdERHvxzTffoKSkBPPmzUNeXl7Q+1100UX46aef8Nxzz2H69OnQ6XR4+umncfLJJ+PII4/E2WefjbS0NKxevRpVVVWYMmUKNm3a1G0fl19+OdasWYMXX3wRP/zwAxYuXIj09HTU1dVh27Zt+Pnnn/Haa68d0JU9s9mMs846C2eddRYaGhrw2muv4eWXX0Ztbe1+77M/vv32W1xxxRWYM2cO8vLykJCQgNraWnz11VeorKzE+PHjcffdd3d7zOLFi7F8+XK8/vrrgd9FYWEh3n33XeTm5vb5pPzqq6/GF198gTlz5uCss86C2WzGqlWrUFVVhfnz5/draEZvRo0ahdtuuw1LlizB5MmTcdZZZ0Gv1+Odd97B5MmTsX379gPa//7q79/VzTffjHfeeQdPP/00tmzZgiOOOAKVlZV48803cdJJJ+Gjjz7qMQlif5x00knIycnBAw88gC1btmDixInYvn174OT47bffPuDX/OSTT2LLli24++678emnn+LII4+EEAI7duzAF198gbq6ur32JOjPe1ZVVYVp06ZhypQpmDx5MjIyMtDU1IQPPvgAHo8HN9xwwwG9Fr1ejxNOOAEnnHAC2tra8NZbb+Gll17q0WtpMF133XX4+OOP8fLLLyM/Px9z585FTU0N3nnnHZhMJjz//PM9ei0REVGYGYqlG4iIhqs//OEPPZaf601ra6uwWCwiJiam2xJu33zzjZgzZ46wWCwiPj5enHnmmaK8vFxMnDhRxMTE9Lqv5cuXi4ULF4q4uDhhMBhERkaGmD9/vnjooYf6tJTi/thz/fnBsmPHDnH11VeLqVOnioSEBKHT6URsbKyYPXu2eOCBB4TD4ej1cU6nUyxdulSMHDlSGI1GkZqaKv7v//6v1yUD9+btt98WBx98sLBarSIxMVGcddZZoqioSCxevFgAECUlJYH7+pe36+13718CccmSJT1ue+aZZ8SECROE0WgUmZmZ4oYbbhAdHR37tRzjvffeu8/77q2W3fXn76q+vl5ccsklIjExUZjNZnHIIYeId999Vzz44IMCgHjvvfcC9/Uvubh48eJen7e3111cXCzOOOMMkZSUJKxWq5gxY4Z44403gr6Wvb13vS2nKETXZ/If//iHGDdunDCZTCImJkZMnTpV3Hbbbd2WaQz2+L6+Zy0tLWLp0qVi7ty5Ii0tTRiNRpGeni6OO+448dlnn/W634EwVJ9ZP4fDIf7xj3+IUaNGCaPRKOLj48Vpp50mNmzYMKR1EBGROiQhduv3SUREg85utyMlJQWTJk3qMUSAKJSdd955ePXVV5Gfn4/x48erXQ4RERENEc5xQEQ0SBwOB+x2e7dtPp8PN954Izo7O3HqqaeqUxjRPtTU1PTYtnr1arzxxhsYO3YsQwMiIiKNYY8DIqJBsmHDBsyZMwfHHnss8vLyYLfb8d133yE/Px8HHXQQfv75570uiUiklmnTpsFisWDq1KmIiIhAfn4+Pv/8c+h0OnzyySc4+uij1S6RiIiIhhCDAyKiQdLQ0ICbbroJq1evRl1dHbxeL7KysnDqqafi73//+4AsuUg0GB599FG8+uqrKCoqgt1uR2xsLA4//HD87W9/w8yZM9Uuj4iIiIYYgwMiIiIiIiIiCopzHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiIgmJwQERERERERERBMTggIiIiIiIioqAYHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiIgmJwQERERERERERBMTggIiIiIiIioqAYHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiIgmJwQERERERERERBMTggIiIiIiIioqAYHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiIgmJwQERERERERERBMTggIiIiIiIioqAYHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiIgmJwQERERERERERBMTggIiIiIiIioqAYHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiIgmJwQERERERERERBMTggIiIiIiIioqAYHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiIgmJwQERERERERERBMTggIiIiIiIioqAYHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiIgmJwQERERERERERBMTggIiIiIiIioqAYHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiIgmJwQERERERERERBMTggIiIiIiIioqAYHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiIgmJwQERERERERERBMTggIiIiIiIioqAYHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiIgmJwQERERERERERBMTggIiIiIiIioqAYHBARERERERFRUAwOiIiIiIiIiCgoBgdEREREREREFBSDAyIiIiIiIiIKisEBEREREREREQXF4ICIiIiIiIiI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jsn4eURERJPNf/VekjBqCkQwPiFGTZdQYeJL+voCAT+4qgER0SRicEBEREREREREQXHMMhEREREREREFxeCAiIiIiIiIiIJicEBEREREREREQTE4ICIiIiIiIqKgGBwQERERERERUVAMDoiIiIiIiIgoKAYHRERERERERBQUgwMiIiIiIiIiCorBAREREREREREFxeCAiIiIiIiIiIJicEBEREREREREQTE4ICIiIiIiIqKgGBwQERERERERUVAMDoiIiIiIiIgoKAYHRERERERERBQUgwMiIiIiIiIiCorBAREREREREREFxeCAiIiIiIiIiIJicEBEREREREREQTE4ICIiIiIiIqKgGBwQERERERERUVAMDoiIiIiIiIgoKAYHRERERERERBQUgwMiIiIiIiIiCorBAREREREREREFxeCAiIiIiIiIiIJicEBEREREREREQTE4ICIiIiIiIqKgGBwQERERERERUVAMDoiIiIiIiIgoKAYHRERERERERBQUgwMiIiIiIiIiCorBAREREREREREFxeCAiIiIiIiIiIJicEBEREREREREQTE4oLB27733QpIkSJIElUoFq9WKuXPnYt26dSgpKRmzfWZmJtatWzehn/Hee+9BkiT84x//mLSaP/zwwzG3S5KERx55ZFJ+xsl88sknuOGGG5CbmwuTyYS8vDzcc889cLlcY7aVZRmPPfYYCgsLodfrkZiYiO9+97ujtunv78c999yD7OxsmEwm5Ofn48EHH4TX652W10NERP907733wmKxTPi+03W8/WUo7POC8dd77NfKlSvHbLtr1y7Mnz8fBoMB+fn52LZt25htBgcHsX79eiQmJsJsNmPp0qUoKyubjpdCRDTlNEoXQHS6jEYj9uzZAwDo6+vDgQMH8PTTT+OZZ57Bli1bsGrVqsC2L7/8Mmw2m1KlAgDuu+8+WCwWnHPOOaNu37t3LzIyMqalhhdeeAHl5eW4++67kZ+fj+LiYmzcuBEff/xx4Hfpt3btWuzatQsbNmzAnDlz0NTUhA8++GDUNuvWrcNLL72EBx98EEVFRdi7dy82btwIl8uFBx54YFpeExERhZ5g+7xQsm3bNhQWFga+t9vto+7/4IMPcMUVV2DNmjV4/PHHsWfPHtx4442IiorC1VdfHdju+9//Pp5//nk8+uijSElJwQMPPIALL7wQxcXFsFqt0/Z6iIimAoMDCnsqlQpf/epXA98vXboUt956K5YvX44bb7wR55xzDrKzswEACxcuVKrMkxr5Gqbaf/7nfyI+Pj7w/eLFi2Gz2fDd734Xn376Kc444wwAwF/+8hds374dn332GebOnRvYfuTVGFmW8cILL2D9+vW47bbbAAAXXHABysrK8PzzzzM4ICKikDZnzhyceeaZQe+///77cfbZZ+O3v/0tgOF9XGVlJTZu3BgIDurr67F582Y88cQTuOGGGwAAZ511FtLT0/HUU0/h7rvvnvoXQkQ0hThVgSKSwWDAr371KwwODmLz5s2B24+dqrB3715cfvnlSE5OhtlsxoIFC/Dss88e9zlbW1tx5ZVXwmw2IykpCQ8++OCYbUpKSvDNb34TVqsVZrMZy5cvR2VlZeB+SZIAAOvXrw8MiXzvvfcC9x07bPP111/HueeeC5PJBJvNhsWLF+Pzzz8/5d+L38jQwM8fqjQ2NgZue+aZZ7B48eJRocGxhBDwer1jrqZYrVYIIU67ViIimloejwc/+tGPkJGRAb1ej1mzZmHnzp2jtpnI/tLvRPs8YDh4vvfee5GQkAC73Y7rr78+MGWuvb0der0ezzzzzJjnPfvss3HNNdec5qseH4/Hg3fffRf/+q//Our2lStXoqSkBNXV1QCAt99+G7Isj9ouNjYWF198Md54441pqZWIaCoxOKCIVVRUhJSUFOzduzfoNjU1NTj33HOxefNm7Nq1C1dddRVuvPFG/O53vxuz7c0334ycnBz86U9/wqpVq/DjH/84cPUBAKqqqnDOOeegs7MT27dvx86dO9HW1oYLL7wQHo8HAAK13H777di7dy/27t2LRYsWHbe2F154AZdddhkcDgd27tyJHTt24Nxzz0VDQ8MJX7ckSbjuuutO9usZwz/9YORwzY8++giFhYX4wQ9+gJiYGBiNRlxyySU4fPhwYBu1Wo3rrrsOv/71r/HJJ5/A6XTiz3/+M5599tkJ95MgIqLJ4/V6x3zJsjxmu2uuuQZPPfUU7rzzTuzevRuXXHIJVq1ahTfffDOwzUT2l34n2+f9+te/Rnl5OX73u99h48aN2LlzJ+6//34Aw9MFrrjiCmzdunXUcxYXF2Pfvn248cYbg/7c6upqSJKEe++9d1y/p0svvRRqtRqpqalYv349BgYGAvdVVlZiaGho1L4RAGbNmgUAKC0tDfzX4XCMmQ45a9aswDZEROGMUxUooqWlpaG5uTno/SOH3AshcP7556O+vh5PPfUUVq9ePWrbJUuW4OGHHwYALFu2DC0tLfjpT3+Km2++GSqVCvfddx9iY2PxzjvvwGAwAEBgmsSWLVtw6623BqYjpKenn3BqghACd911Fy6++GK8/PLLgdsvvfTSk75mtVoNtVp90u1Gam9vx7333otvfvObyMvLC9ze3NyM7du3o6ioCDt27MDg4CB+/OMfY9myZSgpKQm8zieeeAK33HILvvKVrwQee8899+A//uM/JlQHERFNDpfLBa1We9z7zGZz4N/vvvsuXnvtNbz11lu4+OKLAQxP+WtqasKmTZvwjW98A8DE9pd+J9vnJSUlYceOHQCASy65BJ999hlefPFFPPTQQwCAm266CRdddBFKSkoCJ+pbt25FWloali5dGvS1S5IEtVoNlerE18esVivuvvtunH/++YF+SY888ghKSkqwe/duAEBXVxcAICYmZtRj/QFBZ2dnYLtjt/Fv59+GiCicMTigiCaECAyVPJ6uri5s2rQJr776KhoaGuDz+QAAcXFxY7a94oorRn1/9dVX49lnn0V9fT3S09Px9ttvY+XKldBoNIHVBGw2GxYuXIhPPvlkQnWXlZWhvr4ev/jFLyb0OAATXslgaGgocED45JNPjrpPlmV4vV689tprSEhIADA8kqOoqAg7d+4MzOP84Q9/iNdffx2bN29GXl4ePvroI9x3332w2WxYv379hF8DERGdHqPRiL/97W9jbn/66adHTUN4++23ERsbiyVLlozafyxduhS33HILfD4f1Gr1hPaX43XsyX9RURGef/75wPdLlixBdnY2tm7diocffhherxfPPfcc1q5de8JQICMjY1z7woULF47qfbRkyRIkJSVh3bp12Ldv36gwnIhopmNwQBGtvr4e+fn5Qe+/7rrr8OGHH2Ljxo2YPXs2oqOj8eSTT+KFF14Ys63D4Rj1vf9EuqmpCenp6Whvb8fjjz+Oxx9/fMxjdTrdhOru6OgAACQnJ0/ocRMlhMANN9yAffv24f3330dSUtKo+202G9LS0gKvFQAKCgqQmpqK4uJiAMDBgwfxyCOP4LXXXsNll10GADj//PMxNDSEDRs24JZbbkFUVNSUvg4iIhpNpVIdt+Gf/0q6X3t7Ozo7O4OOTmhqakJqauqE9pfjdewVep1OF5jaBwyPHFizZg1++ctf4mc/+xl2796NtrY2XH/99af8M0/mmmuuwbp16/Dpp5/iK1/5SmBkQU9Pz6jt/CMRYmNjAQzvL4/dxr+dfxsionDG4IAiVnFxMRoaGoLO93e73di9ezceffRR3H777YHbjzf/ExhujjhSS0sLAAROtmNjY7F8+XLceuutYx470RNn/xWckY0Kp8Jdd92FP/zhD3jjjTcwf/78MffPnj0bvb29x32s2+0GABw6dAgAsGDBglH3L1y4EB6PB/X19YEhpkREFFpiY2MRHx8ftIGfw+GY8P5yMl1//fXYuHEjdu/eja1bt+KCCy5AVlbWlP9cv5ycHGi1WpSWlmLZsmWB2/19C/y9DwoLC9HS0oKurq5RfQ5KS0vH9EcgIgpHbI5IEcntduP222+HXq/HmjVrjruNx+OBLMujRgP09fXhtddeO+72I3sNAMCLL76I5ORkpKamAgAuuugiHDx4EAsXLsSZZ5456qugoCDwOK1WGzjpDsZ/VX/btm3jer2n4qGHHsJjjz2G7du348ILLzzuNitWrEBxcfGoPhGlpaWor68PLNmYkZEBAPjss89GPfbTTz+FJEmB+4mIKPRcdNFFaGtrg06nG7PvOvPMMwOjACayvxxpPPu8E0lMTMSKFSvw3//933jzzTcDU+Smin+qxFlnnQUA0Ov1uOCCC/Diiy+O2u6FF17ArFmzkJmZCQC4+OKLoVKp8NJLLwW26erqwttvvz2u/kRERKGOIw4o7MmyjI8++ggA4HQ6ceDAATz99NOoqqrC9u3bAzv1Y1mtVpx11ll46KGHEB8fD41Gg4ceeghWq3XM6AIA2LNnD9avX4+lS5finXfewbPPPovf/OY3gXmW9913H8466ywsW7YMN998MxISEtDc3Iy//vWvOO+88/Cd73wHwHCH5VdffRXnnXcezGYzCgoKxoxI8C/N+J3vfAdXXXUVrr32Wuj1euzduxdnnXUWVqxYEfT3odFosHr1amzZsiXoNjt37sQ999yDVatWISsrK/D7A4avrviXa7zpppvwq1/9CitWrMCGDRswODiIDRs2ICcnJ9AXwX9wuXbtWrS0tCA3Nxcff/wxfvazn+GGG26AyWQKWgcRESlr6dKluOyyy3DJJZfg7rvvxrx58+ByuVBcXIyKigps3rx5wvvLkcazzzuZm266CcuXL0dMTAyuuuqqk25fU1ODnJwcbNy4ERs3bgy63apVq5Cbm4tFixbBYDBgz549eOyxx/Ctb31r1DSPDRs2YPHixbj11ltxzTXX4N1338XOnTtHTdNITU3FmjVrsH79eqjVaqSkpODBBx+E1WrF2rVrJ/R6iYhCkiAKY5s2bRIAAl8Wi0XMmTNH3HbbbaKkpGTM9hkZGeK2224LfF9eXi6WLFkiTCaTSEtLEw8//LDYtGmTMJvNgW3effddAUDs3r1bXH755cJkMomEhARx//33j3n+w4cPi2uuuUbExcUJvV4vMjMzxbXXXisOHjwY2Ob9998XixYtEkajUQAQ7777rhBCCADi4YcfHvV8r732mjj77LOFwWAQMTExYsmSJeLzzz8/4e8EgFi9evUJt1m9evWo39vIr23bto3atqqqSlx22WXCbDaLqKgocfXVV4u6urpR2zQ1NYk1a9aIjIwMYTQaRX5+vti0aZPo7+8/YR1ERDT5jt2Pnew+j8cj7rvvPpGXlyd0Op2Ij48XF1xwgfj9738f2GYi+8tPPvkkcNtE9nmPPfaYON6hqdfrFSaTSXzve98b1+s/cuSIACA2bdp0wu0efPBBMXv2bGGxWIRWqxX5+fni3nvvFR6PZ8y2r776qpg7d67Q6XQiNzdXbNmyZcw2brdb3HnnncLhcAij0Sguuuii4x6LEBGFI0kIIaY7rCAiIiIiGo89e/bgwgsvxD/+8Y/ANDkiIppeDA6IiIiIKOQ0NjaioqICd9xxB4xGIz744AOlSyIimrHYHJGIiIiIQs7TTz+NCy64AACwefNmhashIprZOOKAiIiIiIiIiILiiAMiIiIiIiIiCorBAREREREREREFxeCAiIiIiIiIiIJicEBEREREREREQTE4ICIiIiIiIqKgGBwQERERERERUVAMDoiIiIiIiIgoKAYHRERERERERBQUgwMiIiIiIiIiCur/A/xUfnaabItCAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "import pandas as pd\n",
        "\n",
        "target_col = [\"Outcome\"]\n",
        "cat_cols   = data.nunique()[data.nunique() < 12].keys().tolist()\n",
        "cat_cols   = [x for x in cat_cols ]\n",
        "#numerical columns\n",
        "num_cols   = [x for x in data.columns if x not in cat_cols + target_col]\n",
        "#Binary columns with 2 values\n",
        "bin_cols   = data.nunique()[data.nunique() == 2].keys().tolist()\n",
        "#Columns more than 2 values\n",
        "multi_cols = [i for i in cat_cols if i not in bin_cols]\n",
        "\n",
        "#Label encoding Binary columns\n",
        "le = LabelEncoder()\n",
        "for i in bin_cols :\n",
        "    data[i] = le.fit_transform(data[i])\n",
        "\n",
        "#Duplicating columns for multi value columns\n",
        "data = pd.get_dummies(data = data,columns = multi_cols )\n",
        "\n",
        "#Scaling Numerical columns\n",
        "std = StandardScaler()\n",
        "scaled = std.fit_transform(data[num_cols])\n",
        "scaled = pd.DataFrame(scaled,columns=num_cols)\n",
        "\n",
        "#dropping original values merging scaled values for numerical columns\n",
        "df_data_og = data.copy()\n",
        "data = data.drop(columns = num_cols,axis = 1)\n",
        "data = data.merge(scaled,left_index=True,right_index=True,how = \"left\")"
      ],
      "metadata": {
        "id": "gNjWLDp3DNBt"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 1) Libraries\n",
        "import re\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 2) Load data (đổi đường dẫn nếu cần)\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "\n",
        "# (tuỳ chọn) thay 0 -> NaN để tránh méo tương quan ở các biến đo lường\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "for c in cols_fix:\n",
        "    if c in data.columns:\n",
        "        data[c] = data[c].replace(0, np.nan)\n",
        "\n",
        "# 3) Chọn & sắp cột theo đúng trật tự: Outcome → N1..Nk → các biến gốc → còn lại\n",
        "#   - tự dò tất cả cột bắt đầu bằng 'N' (N1, N2, ... N14, N15, ...)\n",
        "def n_index(name):\n",
        "    m = re.search(r'^N(\\d+)$', str(name))\n",
        "    return int(m.group(1)) if m else 10**9  # không khớp thì đẩy ra sau\n",
        "\n",
        "n_cols = sorted([c for c in data.columns if re.match(r'^N\\d+$', str(c))], key=n_index)\n",
        "\n",
        "base_cols_order = [\n",
        "    'Pregnancies','Glucose','BloodPressure','SkinThickness',\n",
        "    'Insulin','BMI','DiabetesPedigreeFunction','Age'\n",
        "]\n",
        "base_cols = [c for c in base_cols_order if c in data.columns]\n",
        "\n",
        "order = []\n",
        "if 'Outcome' in data.columns:\n",
        "    order.append('Outcome')\n",
        "order += n_cols + base_cols\n",
        "\n",
        "# Thêm các cột numeric còn lại (nếu có) mà chưa có trong order\n",
        "others = [c for c in data.select_dtypes(include=[np.number]).columns if c not in order]\n",
        "order += others\n",
        "\n",
        "# 4) Tạo DF tương quan (loại cột toàn NaN nếu có)\n",
        "dfcorr = data[order].select_dtypes(include=[np.number]).copy()\n",
        "dfcorr = dfcorr.dropna(axis=1, how='all')  # bỏ cột toàn NaN\n",
        "corr = dfcorr.corr(numeric_only=True)\n",
        "\n",
        "# 5) Vẽ heatmap\n",
        "plt.figure(figsize=(12, 7))\n",
        "ax = sns.heatmap(\n",
        "    corr, cmap='viridis', vmin=-1, vmax=1, center=0,\n",
        "    square=True, linewidths=0.3, cbar_kws={'shrink': 0.9}\n",
        ")\n",
        "ax.set_title('Correlation heatmap', fontsize=14, pad=12)\n",
        "ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')\n",
        "ax.set_yticklabels(ax.get_yticklabels(), rotation=0)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 707
        },
        "id": "YF9Is1AhEzf6",
        "outputId": "00268127-c8b4-40cb-dbcd-70b029b63fed"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = data.drop('Outcome', axis=1) # Use axis=1 to drop a column\n",
        "y = data['Outcome']"
      ],
      "metadata": {
        "id": "x-TdoxYvE3f7"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def model_performance(model, subtitle) :\n",
        "    #Kfold\n",
        "    cv = KFold(n_splits=5,shuffle=False, random_state = 42)\n",
        "    y_real = []\n",
        "    y_proba = []\n",
        "    tprs = []\n",
        "    aucs = []\n",
        "    mean_fpr = np.linspace(0,1,100)\n",
        "    i = 1\n",
        "\n",
        "    for train,test in cv.split(X,y):\n",
        "        model.fit(X.iloc[train], y.iloc[train])\n",
        "        pred_proba = model.predict_proba(X.iloc[test])\n",
        "        precision, recall, _ = precision_recall_curve(y.iloc[test], pred_proba[:,1])\n",
        "        y_real.append(y.iloc[test])\n",
        "        y_proba.append(pred_proba[:,1])\n",
        "        fpr, tpr, t = roc_curve(y[test], pred_proba[:, 1])\n",
        "        tprs.append(interp(mean_fpr, fpr, tpr))\n",
        "        roc_auc = auc(fpr, tpr)\n",
        "        aucs.append(roc_auc)\n",
        "\n",
        "    # Confusion matrix\n",
        "    y_pred = cross_val_predict(model, X, y, cv=5)\n",
        "    conf_matrix = confusion_matrix(y, y_pred)\n",
        "    trace1 = go.Heatmap(z = conf_matrix  ,x = [\"0 (pred)\",\"1 (pred)\"],\n",
        "                        y = [\"0 (true)\",\"1 (true)\"],xgap = 2, ygap = 2,\n",
        "                        colorscale = 'Viridis', showscale  = False)\n",
        "\n",
        "    #Show metrics\n",
        "    tp = conf_matrix[1,1]\n",
        "    fn = conf_matrix[1,0]\n",
        "    fp = conf_matrix[0,1]\n",
        "    tn = conf_matrix[0,0]\n",
        "    Accuracy  =  ((tp+tn)/(tp+tn+fp+fn))\n",
        "    Precision =  (tp/(tp+fp))\n",
        "    Recall    =  (tp/(tp+fn))\n",
        "    F1_score  =  (2*(((tp/(tp+fp))*(tp/(tp+fn)))/((tp/(tp+fp))+(tp/(tp+fn)))))\n",
        "\n",
        "    show_metrics = pd.DataFrame(data=[[Accuracy , Precision, Recall, F1_score]])\n",
        "    show_metrics = show_metrics.T\n",
        "\n",
        "    colors = ['gold', 'lightgreen', 'lightcoral', 'lightskyblue']\n",
        "    trace2 = go.Bar(x = (show_metrics[0].values),\n",
        "                    y = ['Accuracy', 'Precision', 'Recall', 'F1_score'], text = np.round_(show_metrics[0].values,4),\n",
        "                    textposition = 'auto', textfont=dict(color='black'),\n",
        "                    orientation = 'h', opacity = 1, marker=dict(\n",
        "            color=colors,\n",
        "            line=dict(color='#000000',width=1.5)))\n",
        "\n",
        "    #Roc curve\n",
        "    mean_tpr = np.mean(tprs, axis=0)\n",
        "    mean_auc = auc(mean_fpr, mean_tpr)\n",
        "\n",
        "    trace3 = go.Scatter(x=mean_fpr, y=mean_tpr,\n",
        "                        name = \"Roc : \" ,\n",
        "                        line = dict(color = ('rgb(22, 96, 167)'),width = 2), fill='tozeroy')\n",
        "    trace4 = go.Scatter(x = [0,1],y = [0,1],\n",
        "                        line = dict(color = ('black'),width = 1.5,\n",
        "                        dash = 'dot'))\n",
        "\n",
        "    #Precision - recall curve\n",
        "    y_real = y\n",
        "    y_proba = np.concatenate(y_proba)\n",
        "    precision, recall, _ = precision_recall_curve(y_real, y_proba)\n",
        "\n",
        "    trace5 = go.Scatter(x = recall, y = precision,\n",
        "                        name = \"Precision\" + str(precision),\n",
        "                        line = dict(color = ('lightcoral'),width = 2), fill='tozeroy')\n",
        "\n",
        "    mean_auc=round(mean_auc,3)\n",
        "    #Subplots\n",
        "    fig = tls.make_subplots(rows=2, cols=2, print_grid=False,\n",
        "                          specs=[[{}, {}],\n",
        "                                 [{}, {}]],\n",
        "                          subplot_titles=('Confusion Matrix',\n",
        "                                          'Metrics',\n",
        "                                          'ROC curve'+\" \"+ '('+ str(mean_auc)+')',\n",
        "                                          'Precision - Recall curve',\n",
        "                                          ))\n",
        "    #Trace and layout\n",
        "    fig.append_trace(trace1,1,1)\n",
        "    fig.append_trace(trace2,1,2)\n",
        "    fig.append_trace(trace3,2,1)\n",
        "    fig.append_trace(trace4,2,1)\n",
        "    fig.append_trace(trace5,2,2)\n",
        "\n",
        "    fig['layout'].update(showlegend = False, title = '<b>Model performance report (5 folds)</b><br>'+subtitle,\n",
        "                        autosize = False, height = 830, width = 830,\n",
        "                        plot_bgcolor = 'black',\n",
        "                        paper_bgcolor = 'black',\n",
        "                        margin = dict(b = 195), font=dict(color='white'))\n",
        "    fig[\"layout\"][\"xaxis1\"].update(color = 'white')\n",
        "    fig[\"layout\"][\"yaxis1\"].update(color = 'white')\n",
        "    fig[\"layout\"][\"xaxis2\"].update((dict(range=[0, 1], color = 'white')))\n",
        "    fig[\"layout\"][\"yaxis2\"].update(color = 'white')\n",
        "    fig[\"layout\"][\"xaxis3\"].update(dict(title = \"false positive rate\"), color = 'white')\n",
        "    fig[\"layout\"][\"yaxis3\"].update(dict(title = \"true positive rate\"),color = 'white')\n",
        "    fig[\"layout\"][\"xaxis4\"].update(dict(title = \"recall\"), range = [0,1.05],color = 'white')\n",
        "    fig[\"layout\"][\"yaxis4\"].update(dict(title = \"precision\"), range = [0,1.05],color = 'white')\n",
        "    for i in fig['layout']['annotations']:\n",
        "        i['font'] = titlefont=dict(color='white', size = 14)\n",
        "    py.iplot(fig)"
      ],
      "metadata": {
        "id": "4I5kqlJXFB-A"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def scores_table(model, subtitle):\n",
        "    scores = ['accuracy', 'precision', 'recall', 'f1', 'roc_auc']\n",
        "    res = []\n",
        "    for sc in scores:\n",
        "        scores = cross_val_score(model, X, y, cv = 5, scoring = sc)\n",
        "        res.append(scores)\n",
        "    df = pd.DataFrame(res).T\n",
        "    df.loc['mean'] = df.mean()\n",
        "    df.loc['std'] = df.std()\n",
        "    df= df.rename(columns={0: 'accuracy', 1:'precision', 2:'recall',3:'f1',4:'roc_auc'})\n",
        "\n",
        "    trace = go.Table(\n",
        "        header=dict(values=['<b>Fold', '<b>Accuracy', '<b>Precision', '<b>Recall', '<b>F1 score', '<b>Roc auc'],\n",
        "                    line = dict(color='#7D7F80'),\n",
        "                    fill = dict(color='#a1c3d1'),\n",
        "                    align = ['center'],\n",
        "                    font = dict(size = 15)),\n",
        "        cells=dict(values=[('1','2','3','4','5','mean', 'std'),\n",
        "                           np.round(df['accuracy'],3),\n",
        "                           np.round(df['precision'],3),\n",
        "                           np.round(df['recall'],3),\n",
        "                           np.round(df['f1'],3),\n",
        "                           np.round(df['roc_auc'],3)],\n",
        "                   line = dict(color='#7D7F80'),\n",
        "                   fill = dict(color='#EDFAFF'),\n",
        "                   align = ['center'], font = dict(size = 15)))\n",
        "\n",
        "    layout = dict(width=800, height=400, title = '<b>Cross Validation - 5 folds</b><br>'+subtitle, font = dict(size = 15))\n",
        "    fig = dict(data=[trace], layout=layout)\n",
        "\n",
        "    py.iplot(fig, filename = 'styled_table')"
      ],
      "metadata": {
        "id": "lgx7R-A7FE3s"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_performance(lgbm_clf, 'LightGBM')\n",
        "scores_table(lgbm_clf, 'LightGBM')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "id": "eQS-3DZPFdaI",
        "outputId": "17ac90d9-d3f5-4813-a3e7-07e51fab23ca"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'KFold' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1130597782.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel_performance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlgbm_clf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'LightGBM'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mscores_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlgbm_clf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'LightGBM'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/tmp/ipython-input-892654964.py\u001b[0m in \u001b[0;36mmodel_performance\u001b[0;34m(model, subtitle)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmodel_performance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubtitle\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;31m#Kfold\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mcv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKFold\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0my_real\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0my_proba\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'KFold' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ========== 0) CÀI THƯ VIỆN (Colab) ==========\n",
        "!pip install -q lightgbm\n",
        "\n",
        "# ========== 1) IMPORTS ==========\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "from sklearn.metrics import (confusion_matrix, accuracy_score, precision_score,\n",
        "                             recall_score, f1_score, roc_curve, auc,\n",
        "                             precision_recall_curve)\n",
        "from lightgbm import LGBMClassifier\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "# ========== 2) NẠP DỮ LIỆU ==========\n",
        "# Nếu bạn đã có DataFrame 'data' thì bỏ qua 3 dòng dưới và giữ nguyên 'data'\n",
        "data = pd.read_csv('diabetes.csv')              # thay đường dẫn nếu cần\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "data[cols_fix] = data[cols_fix].replace(0, np.nan)  # chuẩn hóa NaN cho dữ liệu lỗi\n",
        "# LightGBM xử lý NaN được nên không cần impute ở đây\n",
        "\n",
        "# Chọn X, y chỉ gồm dữ liệu số\n",
        "y = data['Outcome'].astype(int)\n",
        "X = data.drop(columns=['Outcome']).select_dtypes(include=[np.number])\n",
        "\n",
        "# Loại bỏ hàng toàn NaN ở feature (nếu có)\n",
        "X = X.loc[~X.isna().all(axis=1)]\n",
        "y = y.loc[X.index]\n",
        "\n",
        "# ========== 3) 5-FOLD TRAIN & EVAL ==========\n",
        "cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "cm_total = np.array([[0,0],[0,0]])\n",
        "metrics = {'accuracy': [], 'precision': [], 'recall': [], 'f1': []}\n",
        "y_true_all, y_proba_all = [], []\n",
        "\n",
        "# LightGBM basic params (bạn có thể tinh chỉnh thêm)\n",
        "lgb_params = dict(\n",
        "    n_estimators=300,\n",
        "    learning_rate=0.05,\n",
        "    max_depth=-1,\n",
        "    subsample=0.9,\n",
        "    colsample_bytree=0.9,\n",
        "    random_state=42,\n",
        "    n_jobs=-1\n",
        ")\n",
        "\n",
        "for tr_idx, va_idx in cv.split(X, y):\n",
        "    X_tr, X_va = X.iloc[tr_idx], X.iloc[va_idx]\n",
        "    y_tr, y_va = y.iloc[tr_idx], y.iloc[va_idx]\n",
        "\n",
        "    model = LGBMClassifier(**lgb_params)\n",
        "    model.fit(X_tr, y_tr)\n",
        "\n",
        "    # Prob & pred\n",
        "    proba = model.predict_proba(X_va)[:, 1]\n",
        "    pred  = (proba >= 0.5).astype(int)\n",
        "\n",
        "    # Confusion matrix cộng dồn\n",
        "    cm = confusion_matrix(y_va, pred, labels=[1,0])  # (rows: true 1/0, cols: pred 1/0) để giống layout mẫu\n",
        "    cm_total += cm\n",
        "\n",
        "    # Metrics\n",
        "    metrics['accuracy'].append(accuracy_score(y_va, pred))\n",
        "    metrics['precision'].append(precision_score(y_va, pred, zero_division=0))\n",
        "    metrics['recall'].append(recall_score(y_va, pred, zero_division=0))\n",
        "    metrics['f1'].append(f1_score(y_va, pred, zero_division=0))\n",
        "\n",
        "    # Lưu cho ROC/PR\n",
        "    y_true_all.append(y_va.values)\n",
        "    y_proba_all.append(proba)\n",
        "\n",
        "y_true_all  = np.concatenate(y_true_all)\n",
        "y_proba_all = np.concatenate(y_proba_all)\n",
        "\n",
        "# ROC & AUC\n",
        "fpr, tpr, _ = roc_curve(y_true_all, y_proba_all)\n",
        "roc_auc = auc(fpr, tpr)\n",
        "\n",
        "# Precision–Recall\n",
        "prec, rec, _ = precision_recall_curve(y_true_all, y_proba_all)\n",
        "\n",
        "# Trung bình metrics\n",
        "acc_mean = np.mean(metrics['accuracy'])\n",
        "pre_mean = np.mean(metrics['precision'])\n",
        "rec_mean = np.mean(metrics['recall'])\n",
        "f1_mean  = np.mean(metrics['f1'])\n",
        "\n",
        "# ========== 4) VẼ BÁO CÁO ==========\n",
        "plt.style.use('dark_background')  # phông tối như hình mẫu\n",
        "fig = plt.figure(figsize=(8,8), facecolor='black')\n",
        "gs = fig.add_gridspec(2, 2, height_ratios=[1, 1.1], wspace=0.15, hspace=0.35)\n",
        "\n",
        "# ---- (a) Confusion Matrix (trên trái) ----\n",
        "ax1 = fig.add_subplot(gs[0,0], facecolor='black')\n",
        "sns.heatmap(cm_total, annot=True, fmt='d', cmap='viridis',\n",
        "            cbar=False, square=True, ax=ax1)\n",
        "ax1.set_title('Confusion Matrix', fontsize=12, pad=6)\n",
        "ax1.set_xlabel('0 (pred)          1 (pred)')\n",
        "ax1.set_ylabel('1 (true-)         0 (true-)')\n",
        "\n",
        "# ---- (b) Metrics bar (trên phải) ----\n",
        "ax2 = fig.add_subplot(gs[0,1], facecolor='black')\n",
        "metric_names = ['F1_score','Recall','Precision','Accuracy']\n",
        "metric_vals  = [f1_mean, rec_mean, pre_mean, acc_mean]\n",
        "colors = ['#87CEFA', '#FFA07A', '#98FB98', '#FFD700']  # xanh nhạt, cam nhạt, xanh lá nhạt, vàng\n",
        "\n",
        "ax2.barh(metric_names, metric_vals, color=colors)\n",
        "for i, v in enumerate(metric_vals):\n",
        "    ax2.text(v+0.01, i, f\"{v:.4f}\", va='center', fontsize=10, color='white')\n",
        "ax2.set_xlim(0, 1)\n",
        "ax2.set_title('Metrics', fontsize=12, pad=6)\n",
        "ax2.set_xlabel('')\n",
        "\n",
        "# ---- (c) ROC (dưới trái) ----\n",
        "ax3 = fig.add_subplot(gs[1,0], facecolor='black')\n",
        "ax3.plot(fpr, tpr, lw=2)\n",
        "ax3.plot([0,1], [0,1], 'k--', lw=1)\n",
        "ax3.set_xlim(0,1); ax3.set_ylim(0,1)\n",
        "ax3.set_xlabel('false positive rate'); ax3.set_ylabel('true positive rate')\n",
        "ax3.set_title(f'ROC curve ({roc_auc:.3f})', fontsize=12, pad=6)\n",
        "\n",
        "# ---- (d) Precision–Recall (dưới phải) ----\n",
        "ax4 = fig.add_subplot(gs[1,1], facecolor='black')\n",
        "ax4.plot(rec, prec, lw=2, color='#B5655E')\n",
        "ax4.set_xlim(0,1); ax4.set_ylim(0,1)\n",
        "ax4.set_xlabel('recall'); ax4.set_ylabel('precision')\n",
        "ax4.set_title('Precision - Recall curve', fontsize=12, pad=6)\n",
        "\n",
        "# ---- Titles chung ----\n",
        "fig.suptitle('Model performance report (5 folds)\\nLightGBM', fontsize=14, y=0.98)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ZBsLx96AGXZy",
        "outputId": "5aee0460-de23-419d-b13b-303373c4f417"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Number of positive: 214, number of negative: 400\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.015276 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 665\n",
            "[LightGBM] [Info] Number of data points in the train set: 614, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.348534 -> initscore=-0.625489\n",
            "[LightGBM] [Info] Start training from score -0.625489\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 214, number of negative: 400\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000119 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 677\n",
            "[LightGBM] [Info] Number of data points in the train set: 614, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.348534 -> initscore=-0.625489\n",
            "[LightGBM] [Info] Start training from score -0.625489\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 214, number of negative: 400\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004393 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 666\n",
            "[LightGBM] [Info] Number of data points in the train set: 614, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.348534 -> initscore=-0.625489\n",
            "[LightGBM] [Info] Start training from score -0.625489\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 215, number of negative: 400\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.006982 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 680\n",
            "[LightGBM] [Info] Number of data points in the train set: 615, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.349593 -> initscore=-0.620827\n",
            "[LightGBM] [Info] Start training from score -0.620827\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 215, number of negative: 400\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012509 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 664\n",
            "[LightGBM] [Info] Number of data points in the train set: 615, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.349593 -> initscore=-0.620827\n",
            "[LightGBM] [Info] Start training from score -0.620827\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 0) Cài thư viện nếu cần (Colab)\n",
        "!pip install -q lightgbm\n",
        "\n",
        "# 1) Imports\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n",
        "from lightgbm import LGBMClassifier\n",
        "import warnings; warnings.filterwarnings('ignore')\n",
        "\n",
        "# 2) Load & sơ chế dữ liệu\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "data[cols_fix] = data[cols_fix].replace(0, np.nan)   # các giá trị 0 bất hợp lý -> NaN (LGBM xử lý được)\n",
        "\n",
        "y = data['Outcome'].astype(int)\n",
        "X = data.drop(columns=['Outcome']).select_dtypes(include=[np.number])\n",
        "mask = ~X.isna().all(axis=1)\n",
        "X, y = X.loc[mask], y.loc[mask]\n",
        "\n",
        "# 3) 5-fold CV\n",
        "cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "lgb_params = dict(\n",
        "    n_estimators=300, learning_rate=0.05,\n",
        "    subsample=0.9, colsample_bytree=0.9,\n",
        "    random_state=42, n_jobs=-1\n",
        ")\n",
        "\n",
        "rows = []\n",
        "for i, (tr, va) in enumerate(cv.split(X, y), 1):\n",
        "    X_tr, X_va = X.iloc[tr], X.iloc[va]\n",
        "    y_tr, y_va = y.iloc[tr], y.iloc[va]\n",
        "\n",
        "    model = LGBMClassifier(**lgb_params)\n",
        "    model.fit(X_tr, y_tr)\n",
        "\n",
        "    proba = model.predict_proba(X_va)[:, 1]\n",
        "    pred  = (proba >= 0.5).astype(int)\n",
        "\n",
        "    rows.append({\n",
        "        'Fold': i,\n",
        "        'Accuracy':  accuracy_score(y_va, pred),\n",
        "        'Precision': precision_score(y_va, pred, zero_division=0),\n",
        "        'Recall':    recall_score(y_va, pred, zero_division=0),\n",
        "        'F1 score':  f1_score(y_va, pred, zero_division=0),\n",
        "        'Roc auc':   roc_auc_score(y_va, proba),\n",
        "    })\n",
        "\n",
        "# 4) Bảng kết quả + mean/std\n",
        "df = pd.DataFrame(rows)\n",
        "mean_row = pd.DataFrame([{'Fold':'mean', **df.drop(columns='Fold').mean().to_dict()}])\n",
        "std_row  = pd.DataFrame([{'Fold':'std',  **df.drop(columns='Fold').std(ddof=0).to_dict()}])\n",
        "cv_table = pd.concat([df, mean_row, std_row], ignore_index=True)\n",
        "\n",
        "# 5) Styling để giống hình\n",
        "caption_html = \"<b>Cross Validation - 5 folds</b><br>LightGBM\"\n",
        "styled = (\n",
        "    cv_table.style\n",
        "      .format({'Accuracy':'{:.3f}', 'Precision':'{:.3f}', 'Recall':'{:.3f}',\n",
        "               'F1 score':'{:.3f}', 'Roc auc':'{:.3f}'})\n",
        "      .set_properties(**{'text-align': 'center'})\n",
        "      .hide(axis='index')\n",
        "      .set_table_styles([\n",
        "          {'selector': 'caption',\n",
        "           'props': [('caption-side','top'), ('font-size','16px'),\n",
        "                     ('text-align','center'), ('padding-bottom','8px')]},\n",
        "          {'selector': 'th',\n",
        "           'props': [('background-color','#bcd0d8'), ('color','#000'),\n",
        "                     ('text-align','center'), ('font-weight','bold')]}\n",
        "      ])\n",
        "      .set_caption(caption_html)\n",
        ")\n",
        "\n",
        "styled\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Jkkkkq-RGkH8",
        "outputId": "0005eba2-20a7-4b86-cf52-1f2a34355d9c"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Number of positive: 214, number of negative: 400\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016412 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 665\n",
            "[LightGBM] [Info] Number of data points in the train set: 614, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.348534 -> initscore=-0.625489\n",
            "[LightGBM] [Info] Start training from score -0.625489\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 214, number of negative: 400\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006085 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 677\n",
            "[LightGBM] [Info] Number of data points in the train set: 614, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.348534 -> initscore=-0.625489\n",
            "[LightGBM] [Info] Start training from score -0.625489\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 214, number of negative: 400\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000108 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 666\n",
            "[LightGBM] [Info] Number of data points in the train set: 614, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.348534 -> initscore=-0.625489\n",
            "[LightGBM] [Info] Start training from score -0.625489\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 215, number of negative: 400\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000098 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 680\n",
            "[LightGBM] [Info] Number of data points in the train set: 615, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.349593 -> initscore=-0.620827\n",
            "[LightGBM] [Info] Start training from score -0.620827\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 215, number of negative: 400\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000094 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 664\n",
            "[LightGBM] [Info] Number of data points in the train set: 615, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.349593 -> initscore=-0.620827\n",
            "[LightGBM] [Info] Start training from score -0.620827\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7b0de21f6000>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_9336e caption {\n",
              "  caption-side: top;\n",
              "  font-size: 16px;\n",
              "  text-align: center;\n",
              "  padding-bottom: 8px;\n",
              "}\n",
              "#T_9336e th {\n",
              "  background-color: #bcd0d8;\n",
              "  color: #000;\n",
              "  text-align: center;\n",
              "  font-weight: bold;\n",
              "}\n",
              "#T_9336e_row0_col0, #T_9336e_row0_col1, #T_9336e_row0_col2, #T_9336e_row0_col3, #T_9336e_row0_col4, #T_9336e_row0_col5, #T_9336e_row1_col0, #T_9336e_row1_col1, #T_9336e_row1_col2, #T_9336e_row1_col3, #T_9336e_row1_col4, #T_9336e_row1_col5, #T_9336e_row2_col0, #T_9336e_row2_col1, #T_9336e_row2_col2, #T_9336e_row2_col3, #T_9336e_row2_col4, #T_9336e_row2_col5, #T_9336e_row3_col0, #T_9336e_row3_col1, #T_9336e_row3_col2, #T_9336e_row3_col3, #T_9336e_row3_col4, #T_9336e_row3_col5, #T_9336e_row4_col0, #T_9336e_row4_col1, #T_9336e_row4_col2, #T_9336e_row4_col3, #T_9336e_row4_col4, #T_9336e_row4_col5, #T_9336e_row5_col0, #T_9336e_row5_col1, #T_9336e_row5_col2, #T_9336e_row5_col3, #T_9336e_row5_col4, #T_9336e_row5_col5, #T_9336e_row6_col0, #T_9336e_row6_col1, #T_9336e_row6_col2, #T_9336e_row6_col3, #T_9336e_row6_col4, #T_9336e_row6_col5 {\n",
              "  text-align: center;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_9336e\" class=\"dataframe\">\n",
              "  <caption><b>Cross Validation - 5 folds</b><br>LightGBM</caption>\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th id=\"T_9336e_level0_col0\" class=\"col_heading level0 col0\" >Fold</th>\n",
              "      <th id=\"T_9336e_level0_col1\" class=\"col_heading level0 col1\" >Accuracy</th>\n",
              "      <th id=\"T_9336e_level0_col2\" class=\"col_heading level0 col2\" >Precision</th>\n",
              "      <th id=\"T_9336e_level0_col3\" class=\"col_heading level0 col3\" >Recall</th>\n",
              "      <th id=\"T_9336e_level0_col4\" class=\"col_heading level0 col4\" >F1 score</th>\n",
              "      <th id=\"T_9336e_level0_col5\" class=\"col_heading level0 col5\" >Roc auc</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td id=\"T_9336e_row0_col0\" class=\"data row0 col0\" >1</td>\n",
              "      <td id=\"T_9336e_row0_col1\" class=\"data row0 col1\" >0.786</td>\n",
              "      <td id=\"T_9336e_row0_col2\" class=\"data row0 col2\" >0.691</td>\n",
              "      <td id=\"T_9336e_row0_col3\" class=\"data row0 col3\" >0.704</td>\n",
              "      <td id=\"T_9336e_row0_col4\" class=\"data row0 col4\" >0.697</td>\n",
              "      <td id=\"T_9336e_row0_col5\" class=\"data row0 col5\" >0.836</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td id=\"T_9336e_row1_col0\" class=\"data row1 col0\" >2</td>\n",
              "      <td id=\"T_9336e_row1_col1\" class=\"data row1 col1\" >0.753</td>\n",
              "      <td id=\"T_9336e_row1_col2\" class=\"data row1 col2\" >0.667</td>\n",
              "      <td id=\"T_9336e_row1_col3\" class=\"data row1 col3\" >0.593</td>\n",
              "      <td id=\"T_9336e_row1_col4\" class=\"data row1 col4\" >0.627</td>\n",
              "      <td id=\"T_9336e_row1_col5\" class=\"data row1 col5\" >0.828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td id=\"T_9336e_row2_col0\" class=\"data row2 col0\" >3</td>\n",
              "      <td id=\"T_9336e_row2_col1\" class=\"data row2 col1\" >0.753</td>\n",
              "      <td id=\"T_9336e_row2_col2\" class=\"data row2 col2\" >0.660</td>\n",
              "      <td id=\"T_9336e_row2_col3\" class=\"data row2 col3\" >0.611</td>\n",
              "      <td id=\"T_9336e_row2_col4\" class=\"data row2 col4\" >0.635</td>\n",
              "      <td id=\"T_9336e_row2_col5\" class=\"data row2 col5\" >0.797</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td id=\"T_9336e_row3_col0\" class=\"data row3 col0\" >4</td>\n",
              "      <td id=\"T_9336e_row3_col1\" class=\"data row3 col1\" >0.739</td>\n",
              "      <td id=\"T_9336e_row3_col2\" class=\"data row3 col2\" >0.618</td>\n",
              "      <td id=\"T_9336e_row3_col3\" class=\"data row3 col3\" >0.642</td>\n",
              "      <td id=\"T_9336e_row3_col4\" class=\"data row3 col4\" >0.630</td>\n",
              "      <td id=\"T_9336e_row3_col5\" class=\"data row3 col5\" >0.785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td id=\"T_9336e_row4_col0\" class=\"data row4 col0\" >5</td>\n",
              "      <td id=\"T_9336e_row4_col1\" class=\"data row4 col1\" >0.712</td>\n",
              "      <td id=\"T_9336e_row4_col2\" class=\"data row4 col2\" >0.592</td>\n",
              "      <td id=\"T_9336e_row4_col3\" class=\"data row4 col3\" >0.547</td>\n",
              "      <td id=\"T_9336e_row4_col4\" class=\"data row4 col4\" >0.569</td>\n",
              "      <td id=\"T_9336e_row4_col5\" class=\"data row4 col5\" >0.768</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td id=\"T_9336e_row5_col0\" class=\"data row5 col0\" >mean</td>\n",
              "      <td id=\"T_9336e_row5_col1\" class=\"data row5 col1\" >0.749</td>\n",
              "      <td id=\"T_9336e_row5_col2\" class=\"data row5 col2\" >0.646</td>\n",
              "      <td id=\"T_9336e_row5_col3\" class=\"data row5 col3\" >0.619</td>\n",
              "      <td id=\"T_9336e_row5_col4\" class=\"data row5 col4\" >0.632</td>\n",
              "      <td id=\"T_9336e_row5_col5\" class=\"data row5 col5\" >0.803</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td id=\"T_9336e_row6_col0\" class=\"data row6 col0\" >std</td>\n",
              "      <td id=\"T_9336e_row6_col1\" class=\"data row6 col1\" >0.024</td>\n",
              "      <td id=\"T_9336e_row6_col2\" class=\"data row6 col2\" >0.036</td>\n",
              "      <td id=\"T_9336e_row6_col3\" class=\"data row6 col3\" >0.052</td>\n",
              "      <td id=\"T_9336e_row6_col4\" class=\"data row6 col4\" >0.041</td>\n",
              "      <td id=\"T_9336e_row6_col5\" class=\"data row6 col5\" >0.026</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -q lightgbm yellowbrick\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from lightgbm import LGBMClassifier\n",
        "from yellowbrick.classifier import DiscriminationThreshold\n",
        "\n",
        "# Data\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "data[cols_fix] = data[cols_fix].replace(0, np.nan)\n",
        "\n",
        "X = data.drop(columns=['Outcome']).select_dtypes(include=[np.number])\n",
        "y = data['Outcome'].astype(int)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.3, stratify=y, random_state=42\n",
        ")\n",
        "\n",
        "pipe = Pipeline([\n",
        "    (\"imputer\", SimpleImputer(strategy=\"median\")),\n",
        "    (\"model\", LGBMClassifier(\n",
        "        n_estimators=300, learning_rate=0.05,\n",
        "        subsample=0.9, colsample_bytree=0.9,\n",
        "        random_state=42, n_jobs=-1\n",
        "    ))\n",
        "])\n",
        "\n",
        "# 👇 Sửa argmax='fscore' (không dùng 'f1')\n",
        "viz = DiscriminationThreshold(\n",
        "    pipe,\n",
        "    classes=[\"healthy\", \"diabetic\"],  # chỉ để hiển thị legend\n",
        "    argmax=\"fscore\",                  # <-- tên metric đúng\n",
        "    beta=1.0,                         # F1\n",
        "    exclude=None,\n",
        "    n_trials=100\n",
        ")\n",
        "\n",
        "viz.fit(X_train, y_train)\n",
        "viz.score(X_test, y_test)\n",
        "viz.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "AIRv94I3PsM3",
        "outputId": "520a13d1-a1f5-4e54-aefd-d1fa702c77dd"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1;30;43mKết quả truyền trực tuyến bị cắt bớt đến 5000 dòng cuối.\u001b[0m\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 171, number of negative: 312\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000079 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 570\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.354037 -> initscore=-0.601340\n",
            "[LightGBM] [Info] Start training from score -0.601340\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 170, number of negative: 313\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000122 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 565\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.351967 -> initscore=-0.610405\n",
            "[LightGBM] [Info] Start training from score -0.610405\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 165, number of negative: 318\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000078 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 572\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.341615 -> initscore=-0.656106\n",
            "[LightGBM] [Info] Start training from score -0.656106\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 160, number of negative: 323\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000308 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 570\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.331263 -> initscore=-0.702479\n",
            "[LightGBM] [Info] Start training from score -0.702479\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 172, number of negative: 311\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000074 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 573\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.356108 -> initscore=-0.592298\n",
            "[LightGBM] [Info] Start training from score -0.592298\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 170, number of negative: 313\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000078 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 569\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.351967 -> initscore=-0.610405\n",
            "[LightGBM] [Info] Start training from score -0.610405\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 175, number of negative: 308\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000083 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 571\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.362319 -> initscore=-0.565314\n",
            "[LightGBM] [Info] Start training from score -0.565314\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 167, number of negative: 316\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000081 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 576\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.345756 -> initscore=-0.637748\n",
            "[LightGBM] [Info] Start training from score -0.637748\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 172, number of negative: 311\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000236 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 569\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.356108 -> initscore=-0.592298\n",
            "[LightGBM] [Info] Start training from score -0.592298\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 167, number of negative: 316\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000078 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 564\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.345756 -> initscore=-0.637748\n",
            "[LightGBM] [Info] Start training from score -0.637748\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 168, number of negative: 315\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000075 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 572\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.347826 -> initscore=-0.628609\n",
            "[LightGBM] [Info] Start training from score -0.628609\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 167, number of negative: 316\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000076 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 566\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.345756 -> initscore=-0.637748\n",
            "[LightGBM] [Info] Start training from score -0.637748\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 170, number of negative: 313\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000086 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 574\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.351967 -> initscore=-0.610405\n",
            "[LightGBM] [Info] Start training from score -0.610405\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 170, number of negative: 313\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000084 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 576\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.351967 -> initscore=-0.610405\n",
            "[LightGBM] [Info] Start training from score -0.610405\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 168, number of negative: 315\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000080 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 568\n",
            "[LightGBM] [Info] Number of data points in the train set: 483, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.347826 -> initscore=-0.628609\n",
            "[LightGBM] [Info] Start training from score -0.628609\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Number of positive: 187, number of negative: 350\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000226 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 610\n",
            "[LightGBM] [Info] Number of data points in the train set: 537, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.348231 -> initscore=-0.626825\n",
            "[LightGBM] [Info] Start training from score -0.626825\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Threshold Plot for LGBMClassifier'}, xlabel='discrimination threshold', ylabel='score'>"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ================== 0) CÀI THƯ VIỆN (Colab) ==================\n",
        "!pip install -q lightgbm\n",
        "\n",
        "# ================== 1) IMPORTS ==================\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "from sklearn.metrics import (confusion_matrix, accuracy_score, precision_score,\n",
        "                             recall_score, f1_score, roc_curve, auc,\n",
        "                             precision_recall_curve, roc_auc_score)\n",
        "\n",
        "from lightgbm import LGBMClassifier\n",
        "import warnings; warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "# ================== 2) NẠP & SƠ CHẾ DỮ LIỆU ==================\n",
        "data = pd.read_csv('diabetes.csv')  # thay đường dẫn nếu cần\n",
        "\n",
        "# thay 0 -> NaN cho các biến đo lường thường nhập sai\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "for c in cols_fix:\n",
        "    if c in data.columns:\n",
        "        data[c] = data[c].replace(0, np.nan)\n",
        "\n",
        "y = data['Outcome'].astype(int)\n",
        "X = data.drop(columns=['Outcome']).select_dtypes(include=[np.number])\n",
        "\n",
        "# Bỏ các hàng toàn NaN ở X (hiếm)\n",
        "mask = ~X.isna().all(axis=1)\n",
        "X, y = X.loc[mask], y.loc[mask]\n",
        "\n",
        "# ================== 3) ĐỊNH NGHĨA MÔ HÌNH ENSEMBLE ==================\n",
        "# LGBM pipeline (impute median)\n",
        "lgb_pipe = Pipeline(steps=[\n",
        "    (\"imputer\", SimpleImputer(strategy=\"median\")),\n",
        "    (\"model\", LGBMClassifier(\n",
        "        n_estimators=300, learning_rate=0.05,\n",
        "        subsample=0.9, colsample_bytree=0.9,\n",
        "        random_state=42, n_jobs=-1\n",
        "    ))\n",
        "])\n",
        "\n",
        "# KNN pipeline (impute median -> scale -> KNN)\n",
        "knn_pipe = Pipeline(steps=[\n",
        "    (\"imputer\", SimpleImputer(strategy=\"median\")),\n",
        "    (\"scaler\", StandardScaler()),\n",
        "    (\"model\", KNeighborsClassifier(n_neighbors=11, weights='distance', p=2))\n",
        "])\n",
        "\n",
        "# Soft voting (trung bình xác suất)\n",
        "ensemble = VotingClassifier(\n",
        "    estimators=[(\"lgbm\", lgb_pipe), (\"knn\", knn_pipe)],\n",
        "    voting=\"soft\", n_jobs=-1, flatten_transform=True\n",
        ")\n",
        "\n",
        "# ================== 4) 5-FOLD CV & THỐNG KÊ ==================\n",
        "cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "cm_total = np.array([[0, 0], [0, 0]])\n",
        "metrics = {'accuracy': [], 'precision': [], 'recall': [], 'f1': [], 'roc_auc': []}\n",
        "y_true_all, y_proba_all = [], []\n",
        "\n",
        "for tr_idx, va_idx in cv.split(X, y):\n",
        "    X_tr, X_va = X.iloc[tr_idx], X.iloc[va_idx]\n",
        "    y_tr, y_va = y.iloc[tr_idx], y.iloc[va_idx]\n",
        "\n",
        "    ensemble.fit(X_tr, y_tr)\n",
        "\n",
        "    proba = ensemble.predict_proba(X_va)[:, 1]\n",
        "    pred  = (proba >= 0.5).astype(int)\n",
        "\n",
        "    # Confusion matrix cộng dồn (layout giống hình: hàng true [1,0], cột pred [0,1])\n",
        "    cm = confusion_matrix(y_va, pred, labels=[1, 0])\n",
        "    cm_total += cm\n",
        "\n",
        "    # Metrics\n",
        "    metrics['accuracy'].append(accuracy_score(y_va, pred))\n",
        "    metrics['precision'].append(precision_score(y_va, pred, zero_division=0))\n",
        "    metrics['recall'].append(recall_score(y_va, pred, zero_division=0))\n",
        "    metrics['f1'].append(f1_score(y_va, pred, zero_division=0))\n",
        "    metrics['roc_auc'].append(roc_auc_score(y_va, proba))\n",
        "\n",
        "    y_true_all.append(y_va.values)\n",
        "    y_proba_all.append(proba)\n",
        "\n",
        "y_true_all  = np.concatenate(y_true_all)\n",
        "y_proba_all = np.concatenate(y_proba_all)\n",
        "\n",
        "# Đường ROC & PR gộp\n",
        "fpr, tpr, _ = roc_curve(y_true_all, y_proba_all)\n",
        "roc_auc = auc(fpr, tpr)\n",
        "prec, rec, _ = precision_recall_curve(y_true_all, y_proba_all)\n",
        "\n",
        "# Trung bình\n",
        "acc_mean = np.mean(metrics['accuracy'])\n",
        "pre_mean = np.mean(metrics['precision'])\n",
        "rec_mean = np.mean(metrics['recall'])\n",
        "f1_mean  = np.mean(metrics['f1'])\n",
        "\n",
        "# ================== 5) VẼ BÁO CÁO ==================\n",
        "plt.style.use('dark_background')\n",
        "fig = plt.figure(figsize=(8.5, 9), facecolor='black')\n",
        "gs = fig.add_gridspec(2, 2, height_ratios=[1, 1.1], wspace=0.15, hspace=0.35)\n",
        "\n",
        "# (a) Confusion Matrix\n",
        "ax1 = fig.add_subplot(gs[0,0], facecolor='black')\n",
        "sns.heatmap(cm_total, annot=True, fmt='d', cmap='viridis',\n",
        "            cbar=False, square=True, ax=ax1)\n",
        "ax1.set_title('Confusion Matrix', fontsize=12, pad=6)\n",
        "ax1.set_xlabel('0 (pred)          1 (pred)')\n",
        "ax1.set_ylabel('1 (true-)         0 (true-)')\n",
        "\n",
        "# (b) Metrics bar\n",
        "ax2 = fig.add_subplot(gs[0,1], facecolor='black')\n",
        "metric_names = ['F1_score','Recall','Precision','Accuracy']\n",
        "metric_vals  = [f1_mean, rec_mean, pre_mean, acc_mean]\n",
        "colors = ['#87CEFA', '#FFA07A', '#98FB98', '#FFD700']\n",
        "\n",
        "ax2.barh(metric_names, metric_vals, color=colors)\n",
        "for i, v in enumerate(metric_vals):\n",
        "    ax2.text(v+0.01, i, f\"{v:.4f}\", va='center', fontsize=10, color='white')\n",
        "ax2.set_xlim(0, 1)\n",
        "ax2.set_title('Metrics', fontsize=12, pad=6)\n",
        "ax2.set_xlabel('')\n",
        "\n",
        "# (c) ROC\n",
        "ax3 = fig.add_subplot(gs[1,0], facecolor='black')\n",
        "ax3.plot(fpr, tpr, lw=2)\n",
        "ax3.plot([0,1], [0,1], 'k--', lw=1)\n",
        "ax3.set_xlim(0,1); ax3.set_ylim(0,1)\n",
        "ax3.set_xlabel('false positive rate'); ax3.set_ylabel('true positive rate')\n",
        "ax3.set_title(f'ROC curve ({roc_auc:.3f})', fontsize=12, pad=6)\n",
        "\n",
        "# (d) Precision–Recall\n",
        "ax4 = fig.add_subplot(gs[1,1], facecolor='black')\n",
        "ax4.plot(rec, prec, lw=2, color='#B5655E')\n",
        "ax4.set_xlim(0,1); ax4.set_ylim(0,1)\n",
        "ax4.set_xlabel('recall'); ax4.set_ylabel('precision')\n",
        "ax4.set_title('Precision - Recall curve', fontsize=12, pad=6)\n",
        "\n",
        "# Titles chung\n",
        "fig.suptitle('Model performance report (5 folds)\\nLightGBM & KNN', fontsize=15, y=0.98)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 863
        },
        "id": "Ggc27gmJU7KS",
        "outputId": "99be3841-3c6d-49f0-9de3-f6fd4ef42c62"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 850x900 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 0) Cài thư viện nếu cần (Colab)\n",
        "!pip install -q lightgbm\n",
        "\n",
        "# 1) Imports\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "from sklearn.metrics import (accuracy_score, precision_score, recall_score,\n",
        "                             f1_score, roc_auc_score)\n",
        "from lightgbm import LGBMClassifier\n",
        "import warnings; warnings.filterwarnings('ignore')\n",
        "\n",
        "# 2) Data + sơ chế tối thiểu\n",
        "data = pd.read_csv('diabetes.csv')\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "data[cols_fix] = data[cols_fix].replace(0, np.nan)  # 0 -> NaN (LGBM/Imputer xử lý)\n",
        "y = data['Outcome'].astype(int)\n",
        "X = data.drop(columns=['Outcome']).select_dtypes(include=[np.number])\n",
        "mask = ~X.isna().all(axis=1)\n",
        "X, y = X.loc[mask], y.loc[mask]\n",
        "\n",
        "# 3) Pipelines\n",
        "lgb = Pipeline([\n",
        "    (\"imp\", SimpleImputer(strategy=\"median\")),\n",
        "    (\"clf\", LGBMClassifier(\n",
        "        n_estimators=300, learning_rate=0.05,\n",
        "        subsample=0.9, colsample_bytree=0.9,\n",
        "        random_state=42, n_jobs=-1\n",
        "    ))\n",
        "])\n",
        "\n",
        "knn = Pipeline([\n",
        "    (\"imp\", SimpleImputer(strategy=\"median\")),\n",
        "    (\"scaler\", StandardScaler()),\n",
        "    (\"clf\", KNeighborsClassifier(n_neighbors=11, weights='distance', p=2))\n",
        "])\n",
        "\n",
        "ens = VotingClassifier(\n",
        "    estimators=[(\"lgbm\", lgb), (\"knn\", knn)],\n",
        "    voting=\"soft\", n_jobs=-1, flatten_transform=True\n",
        ")\n",
        "\n",
        "# 4) 5-fold CV và thu metrics\n",
        "cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "rows = []\n",
        "\n",
        "for i, (tr, va) in enumerate(cv.split(X, y), 1):\n",
        "    X_tr, X_va = X.iloc[tr], X.iloc[va]\n",
        "    y_tr, y_va = y.iloc[tr], y.iloc[va]\n",
        "\n",
        "    ens.fit(X_tr, y_tr)\n",
        "    proba = ens.predict_proba(X_va)[:, 1]\n",
        "    pred  = (proba >= 0.5).astype(int)\n",
        "\n",
        "    rows.append({\n",
        "        \"Fold\": i,\n",
        "        \"Accuracy\":  accuracy_score(y_va, pred),\n",
        "        \"Precision\": precision_score(y_va, pred, zero_division=0),\n",
        "        \"Recall\":    recall_score(y_va, pred, zero_division=0),\n",
        "        \"F1 score\":  f1_score(y_va, pred, zero_division=0),\n",
        "        \"Roc auc\":   roc_auc_score(y_va, proba),\n",
        "    })\n",
        "\n",
        "df = pd.DataFrame(rows)\n",
        "mean_row = pd.DataFrame([{\"Fold\":\"mean\", **df.drop(columns=\"Fold\").mean().to_dict()}])\n",
        "std_row  = pd.DataFrame([{\"Fold\":\"std\",  **df.drop(columns=\"Fold\").std(ddof=0).to_dict()}])\n",
        "cv_table = pd.concat([df, mean_row, std_row], ignore_index=True)\n",
        "\n",
        "# 5) Style bảng giống hình\n",
        "caption_html = \"<b>Cross Validation - 5 folds</b><br>LightGBM & KNN\"\n",
        "styled = (\n",
        "    cv_table.style\n",
        "      .format({'Accuracy':'{:.3f}','Precision':'{:.3f}','Recall':'{:.3f}',\n",
        "               'F1 score':'{:.3f}','Roc auc':'{:.3f}'})\n",
        "      .set_properties(**{'text-align':'center'})\n",
        "      .hide(axis='index')\n",
        "      .set_table_styles([\n",
        "          {'selector':'caption','props':[('caption-side','top'),\n",
        "                                         ('font-size','16px'),\n",
        "                                         ('text-align','center'),\n",
        "                                         ('padding-bottom','8px')]},\n",
        "          {'selector':'th','props':[('background-color','#bcd0d8'),\n",
        "                                    ('color','#000'),\n",
        "                                    ('text-align','center'),\n",
        "                                    ('font-weight','bold')]}\n",
        "      ])\n",
        "      .set_caption(caption_html)\n",
        ")\n",
        "\n",
        "styled\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "Dgs6_5sBW4Ig",
        "outputId": "b2d21045-2aec-401a-846e-459bbe5b96f9"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7b0dcd539be0>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_b584a caption {\n",
              "  caption-side: top;\n",
              "  font-size: 16px;\n",
              "  text-align: center;\n",
              "  padding-bottom: 8px;\n",
              "}\n",
              "#T_b584a th {\n",
              "  background-color: #bcd0d8;\n",
              "  color: #000;\n",
              "  text-align: center;\n",
              "  font-weight: bold;\n",
              "}\n",
              "#T_b584a_row0_col0, #T_b584a_row0_col1, #T_b584a_row0_col2, #T_b584a_row0_col3, #T_b584a_row0_col4, #T_b584a_row0_col5, #T_b584a_row1_col0, #T_b584a_row1_col1, #T_b584a_row1_col2, #T_b584a_row1_col3, #T_b584a_row1_col4, #T_b584a_row1_col5, #T_b584a_row2_col0, #T_b584a_row2_col1, #T_b584a_row2_col2, #T_b584a_row2_col3, #T_b584a_row2_col4, #T_b584a_row2_col5, #T_b584a_row3_col0, #T_b584a_row3_col1, #T_b584a_row3_col2, #T_b584a_row3_col3, #T_b584a_row3_col4, #T_b584a_row3_col5, #T_b584a_row4_col0, #T_b584a_row4_col1, #T_b584a_row4_col2, #T_b584a_row4_col3, #T_b584a_row4_col4, #T_b584a_row4_col5, #T_b584a_row5_col0, #T_b584a_row5_col1, #T_b584a_row5_col2, #T_b584a_row5_col3, #T_b584a_row5_col4, #T_b584a_row5_col5, #T_b584a_row6_col0, #T_b584a_row6_col1, #T_b584a_row6_col2, #T_b584a_row6_col3, #T_b584a_row6_col4, #T_b584a_row6_col5 {\n",
              "  text-align: center;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_b584a\" class=\"dataframe\">\n",
              "  <caption><b>Cross Validation - 5 folds</b><br>LightGBM & KNN</caption>\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th id=\"T_b584a_level0_col0\" class=\"col_heading level0 col0\" >Fold</th>\n",
              "      <th id=\"T_b584a_level0_col1\" class=\"col_heading level0 col1\" >Accuracy</th>\n",
              "      <th id=\"T_b584a_level0_col2\" class=\"col_heading level0 col2\" >Precision</th>\n",
              "      <th id=\"T_b584a_level0_col3\" class=\"col_heading level0 col3\" >Recall</th>\n",
              "      <th id=\"T_b584a_level0_col4\" class=\"col_heading level0 col4\" >F1 score</th>\n",
              "      <th id=\"T_b584a_level0_col5\" class=\"col_heading level0 col5\" >Roc auc</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td id=\"T_b584a_row0_col0\" class=\"data row0 col0\" >1</td>\n",
              "      <td id=\"T_b584a_row0_col1\" class=\"data row0 col1\" >0.779</td>\n",
              "      <td id=\"T_b584a_row0_col2\" class=\"data row0 col2\" >0.700</td>\n",
              "      <td id=\"T_b584a_row0_col3\" class=\"data row0 col3\" >0.648</td>\n",
              "      <td id=\"T_b584a_row0_col4\" class=\"data row0 col4\" >0.673</td>\n",
              "      <td id=\"T_b584a_row0_col5\" class=\"data row0 col5\" >0.833</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td id=\"T_b584a_row1_col0\" class=\"data row1 col0\" >2</td>\n",
              "      <td id=\"T_b584a_row1_col1\" class=\"data row1 col1\" >0.786</td>\n",
              "      <td id=\"T_b584a_row1_col2\" class=\"data row1 col2\" >0.733</td>\n",
              "      <td id=\"T_b584a_row1_col3\" class=\"data row1 col3\" >0.611</td>\n",
              "      <td id=\"T_b584a_row1_col4\" class=\"data row1 col4\" >0.667</td>\n",
              "      <td id=\"T_b584a_row1_col5\" class=\"data row1 col5\" >0.832</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td id=\"T_b584a_row2_col0\" class=\"data row2 col0\" >3</td>\n",
              "      <td id=\"T_b584a_row2_col1\" class=\"data row2 col1\" >0.786</td>\n",
              "      <td id=\"T_b584a_row2_col2\" class=\"data row2 col2\" >0.714</td>\n",
              "      <td id=\"T_b584a_row2_col3\" class=\"data row2 col3\" >0.648</td>\n",
              "      <td id=\"T_b584a_row2_col4\" class=\"data row2 col4\" >0.680</td>\n",
              "      <td id=\"T_b584a_row2_col5\" class=\"data row2 col5\" >0.826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td id=\"T_b584a_row3_col0\" class=\"data row3 col0\" >4</td>\n",
              "      <td id=\"T_b584a_row3_col1\" class=\"data row3 col1\" >0.771</td>\n",
              "      <td id=\"T_b584a_row3_col2\" class=\"data row3 col2\" >0.688</td>\n",
              "      <td id=\"T_b584a_row3_col3\" class=\"data row3 col3\" >0.623</td>\n",
              "      <td id=\"T_b584a_row3_col4\" class=\"data row3 col4\" >0.653</td>\n",
              "      <td id=\"T_b584a_row3_col5\" class=\"data row3 col5\" >0.813</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td id=\"T_b584a_row4_col0\" class=\"data row4 col0\" >5</td>\n",
              "      <td id=\"T_b584a_row4_col1\" class=\"data row4 col1\" >0.719</td>\n",
              "      <td id=\"T_b584a_row4_col2\" class=\"data row4 col2\" >0.609</td>\n",
              "      <td id=\"T_b584a_row4_col3\" class=\"data row4 col3\" >0.528</td>\n",
              "      <td id=\"T_b584a_row4_col4\" class=\"data row4 col4\" >0.566</td>\n",
              "      <td id=\"T_b584a_row4_col5\" class=\"data row4 col5\" >0.779</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td id=\"T_b584a_row5_col0\" class=\"data row5 col0\" >mean</td>\n",
              "      <td id=\"T_b584a_row5_col1\" class=\"data row5 col1\" >0.768</td>\n",
              "      <td id=\"T_b584a_row5_col2\" class=\"data row5 col2\" >0.689</td>\n",
              "      <td id=\"T_b584a_row5_col3\" class=\"data row5 col3\" >0.612</td>\n",
              "      <td id=\"T_b584a_row5_col4\" class=\"data row5 col4\" >0.648</td>\n",
              "      <td id=\"T_b584a_row5_col5\" class=\"data row5 col5\" >0.817</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td id=\"T_b584a_row6_col0\" class=\"data row6 col0\" >std</td>\n",
              "      <td id=\"T_b584a_row6_col1\" class=\"data row6 col1\" >0.025</td>\n",
              "      <td id=\"T_b584a_row6_col2\" class=\"data row6 col2\" >0.043</td>\n",
              "      <td id=\"T_b584a_row6_col3\" class=\"data row6 col3\" >0.044</td>\n",
              "      <td id=\"T_b584a_row6_col4\" class=\"data row6 col4\" >0.042</td>\n",
              "      <td id=\"T_b584a_row6_col5\" class=\"data row6 col5\" >0.020</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ====== Cài thư viện (Colab) ======\n",
        "!pip install -q lightgbm yellowbrick\n",
        "\n",
        "# ====== Imports ======\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "from lightgbm import LGBMClassifier\n",
        "from yellowbrick.classifier import DiscriminationThreshold\n",
        "\n",
        "# ====== Dữ liệu ======\n",
        "data = pd.read_csv('diabetes.csv')  # thay đường dẫn nếu cần\n",
        "cols_fix = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\n",
        "data[cols_fix] = data[cols_fix].replace(0, np.nan)\n",
        "\n",
        "X = data.drop(columns=['Outcome']).select_dtypes(include=[np.number])\n",
        "y = data['Outcome'].astype(int)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.3, stratify=y, random_state=42\n",
        ")\n",
        "\n",
        "# ====== Pipelines các base learners ======\n",
        "lgbm = Pipeline([\n",
        "    (\"imp\", SimpleImputer(strategy=\"median\")),\n",
        "    (\"clf\", LGBMClassifier(\n",
        "        n_estimators=300, learning_rate=0.05,\n",
        "        subsample=0.9, colsample_bytree=0.9,\n",
        "        random_state=42, n_jobs=-1\n",
        "    ))\n",
        "])\n",
        "\n",
        "knn = Pipeline([\n",
        "    (\"imp\", SimpleImputer(strategy=\"median\")),\n",
        "    (\"scaler\", StandardScaler()),\n",
        "    (\"clf\", KNeighborsClassifier(n_neighbors=11, weights='distance', p=2))\n",
        "])\n",
        "\n",
        "# ====== VotingClassifier (soft voting để có predict_proba) ======\n",
        "voter = VotingClassifier(\n",
        "    estimators=[(\"lgbm\", lgbm), (\"knn\", knn)],\n",
        "    voting=\"soft\", n_jobs=-1, flatten_transform=True\n",
        ")\n",
        "\n",
        "# ====== Threshold Plot (Yellowbrick) ======\n",
        "# LƯU Ý: dùng argmax=\"fscore\" (không phải \"f1\")\n",
        "viz = DiscriminationThreshold(\n",
        "    voter,\n",
        "    classes=[\"healthy\", \"diabetic\"],\n",
        "    argmax=\"fscore\",     # tối ưu theo F1 (beta=1)\n",
        "    beta=1.0,\n",
        "    exclude=None,        # hiển thị precision/recall/f-score/queue rate\n",
        "    n_trials=100         # mật độ điểm threshold 0..1\n",
        ")\n",
        "\n",
        "viz.fit(X_train, y_train)\n",
        "viz.score(X_test, y_test)\n",
        "viz.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 541
        },
        "id": "jg2vgEgXW-fj",
        "outputId": "f2b048c9-668d-48cb-f461-28d9d2fc1599"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Threshold Plot for VotingClassifier'}, xlabel='discrimination threshold', ylabel='score'>"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Chào mừng bạn đến với Colab",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}